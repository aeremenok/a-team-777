import org.apache.bcel.Constants;

import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.LocalVariableGen;

import org.apache.bcel.generic.Type;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.ArrayType;

import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;

import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.ILOAD;

import org.apache.bcel.generic.ACONST_NULL;

import org.apache.bcel.generic.StoreInstruction;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.ISTORE;

import org.apache.bcel.generic.ArithmeticInstruction;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.FREM;

import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Field;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Arrays;

COMPILER CompilationUnit

// Функция возвращает токен, следующий за текущим (заглядывает вперед)
boolean next(int i)
	{
		scanner.ResetPeek();
		Token peek = scanner.Peek();
		return (peek.kind == i);
	}
    // путь к генерируемым классам
    public static String filePath;
	
    // созданные классы
    public HashMap<String, ClassGen> classes = new HashMap<String, ClassGen>();
    
    // обертка формальных параметров
    public class Args
    {
        Type[] argTypes = null;
        String[] argNames = null;
    }
    
    // логгер
    public void log(String msg)
    {
        System.err.println(msg);        
    }
    
    // обертка параметров кода (передается по ссылке всем инструкциям и выражениям. можно дополнить чем-нибудь еще)
    class CodeWrapper
    {
        InstructionList il;
        ClassGen        classGen;
        MethodGen       methodGen;

        public CodeWrapper(
            ClassGen classGen,
            InstructionList il,
            MethodGen methodGen
        )
        {
            this.il = il;
            this.classGen = classGen;
            this.methodGen = methodGen; 
        }
    }
    
    // поиск
    public Method getMethod(
        String name,
        Type[] argTypes,
        ClassGen classGen )
    {
        for ( Method method : classGen.getMethods() )
            if ( 
                method.getName().equals( name ) &&
                Arrays.deepEquals( method.getArgumentTypes(), argTypes ) 
                )
                return method;
        return null;
    }

    public LocalVariableGen getVarGen(
        String name,
        MethodGen methodGen )
    {   
        for ( LocalVariableGen var : methodGen.getLocalVariables() )
			if ( var.getName().equals( name ) )
			    return var;
        return null;
    }
    
    public Field getFieldGen(
        String name,
        ClassGen classGen )
    {   
        for ( Field var : classGen.getFields() )
			if ( var.getName().equals( name ) )
			    return var;
        return null;
    }
/*--------------------------------------------------------------------------*/
CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  
  zero          = '0'.
  zeroToThree   = zero + "123".
  octalDigit    = zero + "1234567". 
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit.
  hexDigit      = digit + "ABCDEFabcdef".
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf. 

TOKENS
	id                 = letter { letter | digit }.
	openRoundBracket   = '('.
	closeRoundBracket  = ')'.
	openCurlyBracket   = '{'.
	closeCurlyBracket  = '}'.
	dot                = '.'.
	isequal            = '='.
	
    /*-------------------------------------------------------------------------*/
    intLit = 
	    ( 
	          zero
	        | nonZeroDigit { digit }
	        | ( "0x" | "0X" ) hexDigit { hexDigit }
	        | '0' octalDigit { octalDigit }
	    ) [ "l" | "L" ].
    /*-------------------------------------------------------------------------*/
    floatLit =
        "." digit {digit} 
        [ ("e" | "E") ["+" | "-"] digit {digit} ] 
        [ "F" | "f" | "D" | "d" ]
        | digit {digit} 
        (
            "." {digit} 
            [("e" | "E" ) ["+" | "-"] digit {digit} ] [ "F" | "f" | "D" | "d" ]
            |
            ("e" | "E") ["+" | "-"] digit {digit} [ "F" | "f" | "D" | "d" ]
            |
            "F" | "f" | "D" | "d"
        ).  
    /*-------------------------------------------------------------------------*/
    stringLit = 
        "\""
        {
            stringChar
            | "\\" 
            (
                "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "u" { "u" }
                 hexDigit hexDigit hexDigit hexDigit
                |
                zeroToThree [ octalDigit ] [ octalDigit ]
                |
                octalDigit [ octalDigit ]
            )
         } 
        "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------identifier----------------------------------*/
identifier<out String value>
= 
id
(. 
    value = t.val;
    log("id="+t.val);
    if (value.equals("new")) SemErr("\"new\" is not a valid id");
 .)
.
/*----------------------------------staticAccess----------------------------------*/
staticAccess<out int modifier> 
= 
 "static" (.modifier = Constants.ACC_STATIC;.)
.
/*----------------------------------finalAccess----------------------------------*/
finalAccess<out int modifier>
=
 "final" (.modifier = Constants.ACC_FINAL;.)
.
/*----------------------------------CompilationUnit----------------------------------*/
CompilationUnit = 
	typeDeclaration {typeDeclaration}
.
/*----------------------------------typeDeclaration----------------------------------*/
typeDeclaration =
    (. int specifier = 0;.)
    // xxx здесь не распознаются default %)
	[accessSpecifier<out specifier>]
	(
		interfaceDeclaration<specifier> 
		|
		classDeclaration<specifier>
	)
.
/*----------------------------------classDeclaration----------------------------------*/
classDeclaration<int modifier> =  
	"class"
	identifier<out String className>
	(.String superName = "java.lang.Object";.)
	[
	   "extends" identifier<out superName>
	   // проверка типов
	   (.
	       if(superName.equals(className)) SemErr("cannot self-inherit");
	       if (classes.get(superName)==null)
	           SemErr("no such type "+superName);
	   .)
	]
	(.String interfaceName = null;.)
	[
	   "implements"identifier<out interfaceName>
	   // проверка типов
	   (.
	       if(interfaceName.equals(className)) SemErr("cannot self-inherit");
           if (classes.get(superName)==null)
               SemErr("no such type "+superName);
	   .)
	]
	(.
	   ClassGen classGen = new ClassGen(
	       className, 
	       superName, 
	       className+".class", 
	       modifier,
	       interfaceName==null ? null : new String[]{interfaceName} );
	       
	   if (classes.get(className)==null)           
           classes.put(className, classGen);
       else
           SemErr("duplicate class "+className);
           
	   // todo пусть будет =)
	   classGen.addEmptyConstructor( Constants.ACC_PUBLIC );
	   log("class "+className+" created");
	.)
	classBody<classGen>
    (.
       try{
           classGen.getJavaClass().dump( filePath+"/"+className+".class" );
       }catch(Exception e){e.printStackTrace();}
    .)
.
/*----------------------------------interfaceDeclaration----------------------------------*/
interfaceDeclaration<int modifier> =
	"interface"
	(. modifier |= Constants.ACC_INTERFACE | Constants.ACC_ABSTRACT; .) 
	identifier<out String interfaceName>
	(.String superInterfaceName = null;.)
    [
        "extends" identifier<out superInterfaceName>
       // проверка типов
       (.
            if(superInterfaceName.equals(interfaceName)) SemErr("cannot self-inherit");
           if (classes.get(superInterfaceName)==null)
               SemErr("no such type "+superInterfaceName);
       .)        
    ]
	(.
	
	   ClassGen classGen = new ClassGen(
	       interfaceName, 
	       "java.lang.Object", 
	       interfaceName+".class", 
	       modifier,
	       superInterfaceName==null ? null : new String[]{superInterfaceName} );
       if (classes.get(interfaceName)==null)	       
	       classes.put(interfaceName, classGen);
	   else
	       SemErr("duplicate interface "+interfaceName);
	   log("interface "+interfaceName+" created");
	.)   
	interfaceBody<classGen>
	(.
	   try{
	       classGen.getJavaClass().dump( filePath+"/"+interfaceName+".class" );
	   }catch(Exception e){e.printStackTrace();}
	.)
.
/*----------------------------------accessSpecifier----------------------------------*/
accessSpecifier<out int specifier> =
	(.specifier = 0;.)
	(
	   "public"       (.specifier = Constants.ACC_PUBLIC;.)
	)
.
/*----------------------------------type----------------------------------*/
type<out Type typeLiteral> =
    (.typeLiteral = null;.)
	(
	       ("boolean"   (.typeLiteral = Type.BOOLEAN;.))
	   |   ("int"       (.typeLiteral = Type.INT;.))
	   |   ("float"     (.typeLiteral = Type.FLOAT;.))
	   |   ("void"      (.typeLiteral = Type.VOID;.))
	   |   ("String"    (.typeLiteral = new ObjectType("java.lang.String");.))
	   |   ("Vector"    (.typeLiteral = new ObjectType("java.util.Vector");.))
	)
.
/*----------------------------------formalParameterList----------------------------------*/
formalParameterList<Args args> =
    (.
        ArrayList<Type> types = new ArrayList<Type>();  
        ArrayList<String> names = new ArrayList<String>();
        Type typeLiteral = null;
    .)
    (
        type<out typeLiteral>       
        | 
        identifier<out String typeName>  
        (.
           if (classes.get(typeName)==null)
               SemErr("no such type "+typeName);
           else
               typeLiteral = new ObjectType(typeName);               
        .)
    )
    (.types.add(typeLiteral);.)
	identifier<out String param>
	(.names.add(param);.)
	{
        ',' 
	    (
	        type<out typeLiteral>       
	        | 
	        identifier<out String typeName>  
	        (.
	           if (classes.get(typeName)==null)
	               SemErr("no such type "+typeName);
	           else
	               typeLiteral = new ObjectType(typeName);	        
	        .)
	    )
	   (.types.add(typeLiteral);.) 
	   identifier<out param>
	   (.names.add(param);.)
	}
	(.
	   args.argTypes = types.toArray(new Type[types.size()]);
	   args.argNames = names.toArray(new String[names.size()]);
	.)
.
/*----------------------------------classBody----------------------------------*/
classBody<ClassGen classGen> =
	'{'
	{
	    (.int modifier = 0;.)
		[accessSpecifier<out modifier>]
		(
            (
                IF(next(_openRoundBracket))
                // это конструктор
			        identifier<out String methodName>   
			        (.Args args = new Args();.)
			        openRoundBracket [formalParameterList<args>] closeRoundBracket
			        (.
						if (getMethod(methodName, args.argTypes, classGen)==null)
						{
							InstructionList il = new InstructionList();
							MethodGen methodGen = new MethodGen(
								modifier,
								new ObjectType(classGen.getClassName()), // todo сохранить
								args.argTypes,
								args.argNames,
								"<init>",
								classGen.getClassName(),
								il,
								classGen.getConstantPool()
							);
							log("method "+methodName+" created");
							CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);						  
			        .) 
			        Statement<cw>
			        (.
							if (cw.il.getLength()==0)
							    cw.il.append( InstructionConstants.RETURN );
							    
							cw.methodGen.setMaxStack();
							classGen.addMethod(cw.methodGen.getMethod());
						}
                        else
                            SemErr("duplicate constructor "+methodName); 
                    .)
		    )
            |
            (   // это обычный член класса
                [finalAccess<out int fMod>      (.modifier |= fMod;.)]
                (.Type typeLiteral = null;.)
                (
                    type<out typeLiteral>       
                    | 
                    identifier<out String typeName>  
                    (.
			           if (classes.get(typeName)==null)
			               SemErr("no such type "+typeName);
			           else
			             typeLiteral = new ObjectType(typeName);
                    .)
                )
	            identifier<out String member>
                (
                    ( // это метод
                        (.Args args = new Args();.)
                        openRoundBracket [formalParameterList<args>] closeRoundBracket
                        (.
                            if (getMethod(member, args.argTypes, classGen)==null)
                            {
	                            if (member.equals("main")) // наш "main"
	                            {
	                                if ( args.argTypes != null ) SemErr("too many args in main");
	                                if ( !typeLiteral.equals(Type.VOID) ) SemErr("main cannot return a value. type must be \"void\"");
	                                                            
	                                modifier = Constants.ACC_STATIC | Constants.ACC_PUBLIC;
	                                args.argTypes = new Type[]{ new ArrayType( Type.STRING, 1 ) };
	                                args.argNames = new String[] { "argv" };
	                            } // todo передать х.б. 1 параметр
                            
                                InstructionList il = new InstructionList();
								MethodGen methodGen = new MethodGen(
									modifier,
									typeLiteral,
									args.argTypes,
									args.argNames,
									member,
									classGen.getClassName(),
									il,
									classGen.getConstantPool()
								);
	                            log("method "+member+" created");
	                            CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);
                        .) 
                        Statement<cw>
                        (.
                                if (cw.il.getLength()==0 || typeLiteral.equals(Type.VOID) )                            
                                    cw.il.append( InstructionConstants.RETURN );

                                cw.methodGen.setMaxStack();
                                classGen.addMethod(cw.methodGen.getMethod());
                            }
                            else
                                SemErr("duplicate method "+member);
                        .)
		            )
                    |
                    ( // это атрибут
                        (.
                            FieldGen fieldGen = new FieldGen(
                                modifier,
                                typeLiteral,
                                member,
                                classGen.getConstantPool()
                            ); 
                            if ( Arrays.asList(classGen.getFields()).contains(fieldGen.getField()) )
                                SemErr("duplicate field "+member);
                            else  
                                classGen.addField( fieldGen.getField() );                         
                        .)
                        // запрещаем инициализировать поля сразу, т.к. это требует неявного создания к-ра
                        // пусть польз-ль сам пишет к-р и делает там, что хочет =)
                        ';'
                    )
	            )
            )
		)
	}
	'}'
.
/*----------------------------------interfaceBody----------------------------------*/
interfaceBody<ClassGen classGen> =
	'{'
	{
	   (.int modifier = 0;.)
		[accessSpecifier<out modifier>
		  (.     
		      if (modifier == Constants.ACC_PRIVATE || modifier == Constants.ACC_PROTECTED)
                SemErr("interface memebers ought to be public or default");
              modifier = Constants.ACC_PUBLIC;
          .)
		]
		[finalAccess<out int fMod>    (.modifier |= fMod;.)]
		[staticAccess<out int sMod>   (.modifier |= sMod;.)]
		(.Type typeLiteral = null;.)
		(
			type<out typeLiteral>       
			| 
			identifier<out String typeName>  
			(.
	           if (classes.get(typeName)==null)
	               SemErr("no such type "+typeName);
	           else
	               typeLiteral = new ObjectType(typeName);
			.)
		)
		(.log("abstr method");.)
		identifier<out String methodName>	
		(.Args args = new Args();.)
		openRoundBracket [formalParameterList<args>] closeRoundBracket ';'
		(.
		  MethodGen methodGen = new MethodGen(
		      modifier,
              typeLiteral,
              args.argTypes,
              args.argNames,
              methodName,
              classGen.getClassName(),
              null, // instructions list
              classGen.getConstantPool()
		  );
		.)
	}
	'}'
.

/*---------------------------------------------------------------------------*
 *---------------------------- Statements -----------------------------------*
 *---------------------------------------------------------------------------*/
// инструкция
Statement<CodeWrapper cw>
=
  Block<cw>
| "if" ParExpression<out Type exprType, cw> Statement<cw> [ "else" Statement<cw> ]
| "while" ParExpression<out Type exprType, cw> Statement<cw>
| "return" [ Expression<out Type exprType, cw> ] ";"
| "break;"
| "continue;"
| ";"
| Expression<out Type exprType, cw> ';'  
.
/*---------------------------------------------------------------------------*/
// блок кода
Block<CodeWrapper cw>
= "{" { BlockStatement<cw> } "}"
.
/*---------------------------------------------------------------------------*/
// код состоит из объявлений и инструкций
BlockStatement<CodeWrapper cw>
=
(
    IF(next(_id))
        LocalVariableDeclaration<cw> ";"
)
|
(
    Statement<cw>
)
.
/*---------------------------------------------------------------------------*/
// объявление переменной
LocalVariableDeclaration<CodeWrapper cw>
= 
(.
    InstructionFactory factory = new InstructionFactory( cw.classGen );
    Type typeLiteral = null;
.)
(
    type<out typeLiteral>       
    | 
    identifier<out String typeName>  
    (.
        if (classes.get(typeName)==null)
            SemErr("no such type "+typeName);
		else
		{
		    typeLiteral = new ObjectType(typeName);            
    
			cw.il.append( factory.createNew( typeLiteral.toString() ) );
			cw.il.append( InstructionConstants.DUP );
        } 
    .)
)
identifier<out String varName>
(.
    if (getVarGen(varName, cw.methodGen)!=null)
        SemErr("duplicate local variable "+varName);
    else if (typeLiteral!=null)
    {
        LocalVariableGen lg = cw.methodGen.addLocalVariable(varName, typeLiteral, null, null);
.)
["=" (.log("init");.) Expression<out Type exprType, cw> // здесь нам оставят результат на верхушке стека. мы его сохраняем в переменную 
(.
	    if ( !typeLiteral.equals(exprType) && !exprType.equals(Type.NULL) )
	       SemErr("incompatible types: expected "+typeLiteral+", got "+exprType);
	    else 
	    {   
		    StoreInstruction store = null;
		    
		    int name = lg.getIndex();
		    if (typeLiteral.equals(Type.VOID))
		        SemErr("void variables are not allowed");
		    else if (
		        typeLiteral.equals(Type.INT) ||
		        typeLiteral.equals(Type.BYTE) ||
		        typeLiteral.equals(Type.SHORT) ||
		        typeLiteral.equals(Type.BOOLEAN)
		        )
		        store = new ISTORE( name );
		    else if ( typeLiteral.equals(Type.FLOAT) )
		        store = new FSTORE( name );
		    else if ( typeLiteral instanceof ObjectType )
		        store = new ASTORE( name );
		    else
		        SemErr("unknown type "+typeLiteral);
		     
		    lg.setStart( cw.il.append( store ) );
	    }
    }
.)
] 
.
/*---------------------------------------------------------------------------*
 *---------------------------- Expressions ----------------------------------*
 *---------------------------------------------------------------------------*/
Expression<out Type exprType, CodeWrapper cw>
// цель - оставить что-то на верхушке стека
= 
(.exprType = null;.)
(
      ( "System.out.println"
        (.
            log("sout");
	        InstructionFactory factory = new InstructionFactory( cw.classGen );
	        cw.il.append( 
	            factory.createFieldAccess(
	                "java.lang.System", 
	                "out", 
	                new ObjectType( "java.io.PrintStream" ),
	                Constants.GETSTATIC
	            )
	        );
        .)
        Arguments<out Type[] argTypes, cw> 
        (.  
            if(argTypes.length==1)
            {
		        cw.il.append(
		            factory.createInvoke( 
		                "java.io.PrintStream", 
		                "println", 
		                Type.VOID, 
		                argTypes,
		                Constants.INVOKEVIRTUAL
		            )
		        );
            }
            else
                SemErr("sysout requires 1 parameter");
        .)
      )
      |
      ( "System.out.print"
        (.
            log("sout");
            InstructionFactory factory = new InstructionFactory( cw.classGen );
            cw.il.append( 
                factory.createFieldAccess(
                    "java.lang.System", 
                    "out", 
                    new ObjectType( "java.io.PrintStream" ),
                    Constants.GETSTATIC
                )
            );
        .)
        Arguments<out Type[] argTypes, cw> 
        (. 
            if(argTypes.length==1)
            {
                cw.il.append(
                    factory.createInvoke( 
                        "java.io.PrintStream", 
                        "print", 
                        Type.VOID, 
                        argTypes,
                        Constants.INVOKEVIRTUAL
                    )
                );
            }
            else
                SemErr("sysout requires 1 parameter");
        .)
      )      
    | ( "new" Creator<out exprType, cw> )
    | Literal<out exprType, cw>
    |
        ( "(" Expression<out exprType, cw>  
        Infixop<out ArithmeticInstruction instr, exprType> 
        Expression<out Type exprTypeRight, cw> ")"
        (.
            if (exprType == null || !exprType.equals(exprTypeRight))
                SemErr("operand types mismatch "+exprType+" != "+exprTypeRight);
            else
            {
                cw.il.append(instr);
            }
        .)
        )
    |
    (.String className= cw.classGen.getClassName();.)
    ( // операции с объектами
        (
            IF(next(_dot))
                (
                    "this"  (.cw.il.append(new ALOAD(0));.)  
                  | "super" (.cw.il.append(new ALOAD(0)); className = cw.classGen.getSuperclassName();.)
                  | identifier<out String objVarName>
                  (.
                    LocalVariableGen lg = getVarGen(objVarName, cw.methodGen);
                    if (lg==null)
                        SemErr("no such variable "+objVarName);
                    else
                        className = lg.getType().toString();
                    log("className="+className);
                    
                    cw.il.append(new ALOAD(lg.getIndex()));
                  .)
                ) "."
                Selector<out exprType, cw, className>
        )
        |
        ( 
	        (. cw.il.append( new ALOAD(0) ); .)
	        Selector<out exprType, cw, className>
        ) 
    )
)
.
/*---------------------------------------------------------------------------*/
Selector<out Type selType, CodeWrapper cw, String className>
=
(.selType = null;.)
(
	(
	    IF(next(_openRoundBracket))
	       // вызов
	       call<out selType, cw, className>
	)
	|
	( // иначе - присвоение левой части - значения
	    var<out selType, cw, className>
	)
)
.
/*---------------------------------------------------------------------------*/
call<out Type selType, CodeWrapper cw, String className>
=
    identifier<out String method>
    (.selType = null;.) 
    // todo selType = возвращаемый методом тип
    Arguments<out Type[] argTypes, cw>
	(.  // в стеке лежат значения аргументов, вызываем метод
	    InstructionFactory factory = new InstructionFactory( cw.classGen );
	    
	    Method m = getMethod(method, argTypes, cw.classGen);
	    if (m==null)
	       SemErr("no such method "+method);
	    else
	    {
		    cw.il.append( factory.createInvoke(
		        className,
		        method,
		        m.getReturnType(),
		        // todo запомнить, если метод не найден
		        argTypes, 
		        Constants.INVOKEVIRTUAL 
		    ) );
		}
	.)
.
/*---------------------------------------------------------------------------*/
var<out Type selType, CodeWrapper cw, String className>
=
(.selType = null;.)
// todo получить переменную или поле
(
	(
	    IF(next(_isequal))
	        identifier<out String var>
	        (.
	           // куда сохранять
		       int name = -1;
	           Field fg = null;
               LocalVariableGen lg = getVarGen(var, cw.methodGen);
	           if (lg==null)
	           {
	               fg = getFieldGen(var, classes.get(className));
	               if( fg == null )
	                   SemErr("no such variable or field "+var);
	               else
	               { // это поле
	                   selType = fg.getType();
	               }
	           }
	           else
	           {    // это переменная
	               selType = lg.getType();
		           name = lg.getIndex();
	           }
	        .)
	        AssignmentOperator<cw> 
	        Expression<out Type exprType, cw>
			(.
	            InstructionFactory factory = new InstructionFactory( cw.classGen );
		        if (!selType.equals(exprType) && !exprType.equals(Type.NULL))
		           SemErr("incompatible types: expected "+selType+", got "+exprType);
		        else 
		        {
		            if (lg!=null)     
		            {
			            StoreInstruction store = null;
			            
			            if (selType.equals(Type.VOID))
			                SemErr("void variables are not allowed");
			            else if (
			                selType.equals(Type.INT) ||
			                selType.equals(Type.BYTE) ||
			                selType.equals(Type.SHORT) ||
			                selType.equals(Type.BOOLEAN)
			                )
			                store = new ISTORE( name );
			            else if ( selType.equals(Type.FLOAT) )
			                store = new FSTORE( name );
			            else if ( selType instanceof ObjectType )
			                store = new ASTORE( name );
			            else
			                SemErr("unknown type "+selType);
			            
			            InstructionHandle ih = cw.il.append( store );
			            if (lg.getStart()==null)
			              // переменная еще не инициализирована 
			              lg.setStart( ih );
		            }
		            else if (fg!=null)
		            {
                       cw.il.append(
                           factory.createFieldAccess( className, fg.getName(), selType, Constants.PUTFIELD )
                       );		              
		            }
		        }
			.)
	)
	|
	( // иначе - взятие значения
        access<out selType, cw, className>
	)
)
.
/*---------------------------------------------------------------------------*/
access<out Type selType, CodeWrapper cw, String className>
=
        identifier<out String var>
        (.
           selType = null;
           LocalVariableGen lg = getVarGen(var, cw.methodGen);
           if (lg==null)
           {
               Field fg = getFieldGen(var, cw.classGen);
               if( fg == null )
                   SemErr("no such variable or field "+var);
               else
               { // это поле
                   selType = fg.getType();
                   InstructionFactory factory = new InstructionFactory( cw.classGen );
                   cw.il.append(
                       factory.createFieldAccess( className, fg.getName(), selType, Constants.GETFIELD )
                   );    
               }
           }
           else
           {    // это переменная
               selType = lg.getType();
               Instruction instr = null;
               if (
                   selType.equals(Type.INT) ||
                   selType.equals(Type.BOOLEAN)
               )
                   instr = new ILOAD(lg.getIndex());
               else if (selType.equals(Type.FLOAT))
                   instr = new FLOAD(lg.getIndex());
               else if (selType instanceof ObjectType)
                   instr = new ALOAD(lg.getIndex());
               else
                   SemErr("unexpected variable type"+selType);
                   
               cw.il.append(instr);
           }
        .)
.
/*---------------------------------------------------------------------------*/
// аргументы вызовов
Arguments<out Type[] argTypes, CodeWrapper cw>
// задача аргументов - лечь в стек, чтобы их принял метод
=
(.ArrayList<Type> types = new ArrayList<Type>();.)
"(" [ 
    Expression<out Type exprType, cw>       (.types.add(exprType);.)
    {
        "," Expression<out exprType, cw>    (.types.add(exprType);.)
    }
] ")"
(.argTypes = types.toArray(new Type[types.size()]);.)
.
/*---------------------------------------------------------------------------*/
// литерал =)
Literal<out Type exprType, CodeWrapper cw> (.exprType = null;.)
= 
(.
    Object value = null;
	InstructionFactory factory = new InstructionFactory( cw.classGen );
	log("lit="+la.val);
.)
( 
	  intLit            (.exprType = Type.INT; value = new Integer(t.val);.)
	| floatLit          (.exprType = Type.FLOAT; value = new Float(t.val);.)
	| "true"            (.exprType = Type.BOOLEAN; value = new Boolean(t.val);.)
	| "false"           (.exprType = Type.BOOLEAN; value = new Boolean(t.val);.)
    | stringLit         (.exprType = new ObjectType("java.lang.String"); value = t.val.substring(1, t.val.length()-1);.)
) (. cw.il.append( factory.createConstant( value )); .)
| "null"            (.exprType = Type.NULL; cw.il.append( new ACONST_NULL());.)
.
/*---------------------------------------------------------------------------*/
// вызов конструктора
Creator<out Type createdType, CodeWrapper cw>
= 
identifier<out String className> Arguments<out Type[] argTypes, cw>
(.  // в стеке лежат значения аргументов, вызываем метод
    InstructionFactory factory = new InstructionFactory( cw.classGen );
    cw.il.append( factory.createInvoke(
        className,
        "<init>",
        Type.VOID,
        argTypes, 
        Constants.INVOKESPECIAL 
    ) );
    // todo проверка
    createdType = new ObjectType(className);
.)
.
/*---------------------------------------------------------------------------*/
// выражение в скобках
ParExpression<out Type exprType, CodeWrapper cw>                         
=
"(" Expression<out exprType, cw> ")"
.
/*---------------------------------------------------------------------------*/
// присвоение
AssignmentOperator<CodeWrapper cw>
= 
(.log("assgmnt");.)
  ("=")
/*
//todo при наличии времени реализовать упрощённые присвоения, указанные ниже
| ("+=")
| ("-=")
| ("*=")
| ("/=")
| ("&=")
| ("|=")
| ("^=")
| ("%=")
*/
.
/*---------------------------------------------------------------------------*/
// бинарная операция
Infixop<out ArithmeticInstruction instr, Type exprType>
= 
(.instr = null;.)
(
  ("||" 
	  (.
	    if (exprType.equals(Type.BOOLEAN))
	       instr = new IOR();
	    else
	       SemErr("cannot apply || to "+exprType);
	  .)
  )
| ("&&"
      (.
        if (exprType.equals(Type.BOOLEAN))
           instr = new IAND();
        else
           SemErr("cannot apply && to "+exprType);
      .)
)
| ("+"
    (.
        if (exprType.equals(Type.INT))
           instr = new IADD();
        else if (exprType.equals(Type.FLOAT) )
           instr = new FADD();
        else
           SemErr("cannot apply + to "+exprType);        
    .)
)
| ("-"
    (.
        if (exprType.equals(Type.INT))
           instr = new ISUB();
        else if (exprType.equals(Type.FLOAT) )
           instr = new FSUB();
        else
           SemErr("cannot apply - to "+exprType);        
    .)
)
| ("*"
    (.
        if (exprType.equals(Type.INT))
           instr = new IMUL();
        else if (exprType.equals(Type.FLOAT) )
           instr = new FMUL();
        else
           SemErr("cannot apply * to "+exprType);        
    .)
)
| ("/"
    (.
        if (exprType.equals(Type.INT))
           instr = new IDIV();
        else if (exprType.equals(Type.FLOAT) )
           instr = new FDIV();
        else
           SemErr("cannot apply / to "+exprType);        
    .)
)
| ("%"
    (.
        if (exprType.equals(Type.INT))
           instr = new IREM();
        else if (exprType.equals(Type.FLOAT) )
           instr = new FREM();
        else
           SemErr("cannot apply % to "+exprType);        
    .)
)
)
.
/*---------------------------------------------------------------------------*/
/*
Relational<out ArithmeticInstruction instr, Type exprType>
=
("=="
      (.
        if ( 
            exprType.equals(Type.BOOLEAN) ||
            exprType.equals(Type.INT)
            )
        {
        
        }
        else if (exprType.equals(Type.FLOAT))
        {
        
        }
        else
           SemErr("cannot apply == to "+exprType);
      .)
)
| ("!=")
| ("<")
| (">")
| ("<=")
| (">=")
.
*/
/*---------------------------------------------------------------------------*/
END CompilationUnit.
