import org.apache.bcel.Constants;

import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.LocalVariableGen;

import org.apache.bcel.generic.Type;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.ArrayType;

import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;

import org.apache.bcel.generic.StoreInstruction;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.ISTORE;

import java.util.ArrayList;
import java.util.HashMap;

COMPILER CompilationUnit

// Функция возвращает токен, следующий за текущим (заглядывает вперед)
boolean next(int i)
	{
		scanner.ResetPeek();
		Token peek = scanner.Peek();
		return (peek.kind == i);
	}
    // путь к генерируемым классам
    public static String filePath;
	
    // созданные классы
    public HashMap<String, ClassGen> classes = new HashMap<String, ClassGen>();
    // подключенные классы
    public HashMap<String, ObjectType> objectTypes = new HashMap<String, ObjectType>();
    
	// проверка после компиляции - все ли упомянутые классы подключены
	void checkTypes()
    {
        for ( String typeName : objectTypes.keySet() )
        {
            if (
                !typeName.equals("String") && 
                !typeName.equals("Vector") &&
                !classes.keySet().contains( typeName ) 
                )
            {
                SemErr( "type " + typeName + " not found" );
            }
        }
    }
    
    // обертка формальных параметров
    public class Args
    {
        Type[] argTypes = null;
        String[] argNames = null;
    }
    
    // логгер
    public void log(String msg)
    {
        System.err.println(msg);        
    }
    
    // обертка параметров кода (передается по ссылке всем инструкциям и выражениям. можно дополнить чем-нибудь еще)
    class CodeWrapper
    {
        InstructionList il;
        ClassGen        classGen;
        MethodGen       methodGen;

        public CodeWrapper(
            ClassGen classGen,
            InstructionList il,
            MethodGen methodGen
        )
        {
            this.il = il;
            this.classGen = classGen;
            this.methodGen = methodGen; 
        }
    }
    
/*--------------------------------------------------------------------------*/
CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  
  zero          = '0'.
  zeroToThree   = zero + "123".
  octalDigit    = zero + "1234567". 
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit.
  hexDigit      = digit + "ABCDEFabcdef".
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf. 

TOKENS
	id                 = letter { letter | digit }.
	openRoundBracket   = '('.
	closeRoundBracket  = ')'.
	openCurlyBracket   = '{'.
	closeCurlyBracket  = '}'.
	
    /*-------------------------------------------------------------------------*/
    intLit = 
	    ( 
	          zero
	        | nonZeroDigit { digit }
	        | ( "0x" | "0X" ) hexDigit { hexDigit }
	        | '0' octalDigit { octalDigit }
	    ) [ "l" | "L" ].
    /*-------------------------------------------------------------------------*/
    floatLit =
        "." digit {digit} 
        [ ("e" | "E") ["+" | "-"] digit {digit} ] 
        [ "F" | "f" | "D" | "d" ]
        | digit {digit} 
        (
            "." {digit} 
            [("e" | "E" ) ["+" | "-"] digit {digit} ] [ "F" | "f" | "D" | "d" ]
            |
            ("e" | "E") ["+" | "-"] digit {digit} [ "F" | "f" | "D" | "d" ]
            |
            "F" | "f" | "D" | "d"
        ).  
    /*-------------------------------------------------------------------------*/
    charLit = 
        "'"
        (
            char
            |
            "\\"
            (
                "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "u" { "u" }
                hexDigit hexDigit hexDigit hexDigit
                | 
                zeroToThree [ octalDigit ] [ octalDigit ]
                |
                octalDigit [ octalDigit ]
            )
        ) 
        "'".
    /*-------------------------------------------------------------------------*/
    stringLit = 
        "\""
        {
            stringChar
            | "\\" 
            (
                "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "u" { "u" }
                 hexDigit hexDigit hexDigit hexDigit
                |
                zeroToThree [ octalDigit ] [ octalDigit ]
                |
                octalDigit [ octalDigit ]
            )
         } 
        "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------identifier----------------------------------*/
identifier<out String value>
= 
id
(. 
    value = t.val;
    log("id="+t.val);
    if (value.equals("new")) SemErr("\"new\" is not a valid id");
 .)
.
/*----------------------------------staticAccess----------------------------------*/
staticAccess<out int modifier> 
= 
 "static" (.modifier = Constants.ACC_STATIC;.)
.
/*----------------------------------finalAccess----------------------------------*/
finalAccess<out int modifier>
=
 "final" (.modifier = Constants.ACC_FINAL;.)
.
/*----------------------------------CompilationUnit----------------------------------*/
CompilationUnit = 
	typeDeclaration {typeDeclaration}
	(.checkTypes();.)
.
/*----------------------------------typeDeclaration----------------------------------*/
typeDeclaration =
    (. int specifier = 0;.)
    // xxx здесь не распознаются default %)
	[accessSpecifier<out specifier>]
	(
		interfaceDeclaration<specifier> 
		|
		classDeclaration<specifier>
	)
.
/*----------------------------------classDeclaration----------------------------------*/
classDeclaration<int modifier> =  
	"class"
	identifier<out String className>
	(.String superName = "java.lang.Object";.)
	[
	   "extends" identifier<out superName>
	   // проверка типов
	   (.
	       if(superName.equals(className)) SemErr("cannot self-inherit");
	       objectTypes.put(superName, new ObjectType(superName));
	   .)
	]
	(.String interfaceName = null;.)
	[
	   "implements"identifier<out interfaceName>
	   // проверка типов
	   (.
	       if(interfaceName.equals(className)) SemErr("cannot self-inherit");
	       objectTypes.put(superName, new ObjectType(superName));
	   .)
	]
	(.
	   ClassGen classGen = new ClassGen(
	       className, 
	       superName, 
	       className+".class", 
	       modifier,
	       interfaceName==null ? null : new String[]{interfaceName} );
	   classes.put(className, classGen);
	   log("class "+className+" created");
	.)
	classBody<classGen>
    (.
       try{
           classGen.getJavaClass().dump( filePath+"/"+className+".class" );
       }catch(Exception e){e.printStackTrace();}
    .)
.
/*----------------------------------interfaceDeclaration----------------------------------*/
interfaceDeclaration<int modifier> =
	"interface"
	(. modifier |= Constants.ACC_INTERFACE | Constants.ACC_ABSTRACT; .) 
	identifier<out String interfaceName>
	(.String superInterfaceName = null;.)
    [
        "extends" identifier<out superInterfaceName>
       // проверка типов
       (.
            if(superInterfaceName.equals(interfaceName)) SemErr("cannot self-inherit");
            objectTypes.put(superInterfaceName, new ObjectType(superInterfaceName));
       .)        
    ]
	(.
	
	   ClassGen classGen = new ClassGen(
	       interfaceName, 
	       "java.lang.Object", 
	       interfaceName+".class", 
	       modifier,
	       superInterfaceName==null ? null : new String[]{superInterfaceName} );
	   classes.put(interfaceName, classGen);
	   log("interface "+interfaceName+" created");
	.)   
	interfaceBody<classGen>
	(.
	   try{
	       classGen.getJavaClass().dump( filePath+"/"+interfaceName+".class" );
	   }catch(Exception e){e.printStackTrace();}
	.)
.
/*----------------------------------accessSpecifier----------------------------------*/
accessSpecifier<out int specifier> =
	(
		   "public"       (.specifier = Constants.ACC_PUBLIC;.)
		|  "protected"    (.specifier = Constants.ACC_PROTECTED;.)
		|  "private"      (.specifier = Constants.ACC_PRIVATE;.)
	)
	(.specifier = 0;.)
.
/*----------------------------------type----------------------------------*/
type<out Type typeLiteral> =
    (.typeLiteral = null;.)
	(
	       ("boolean"   (.typeLiteral = Type.BOOLEAN;.))
	   |   ("byte"      (.typeLiteral = Type.BYTE;.))
	   |   ("short"     (.typeLiteral = Type.SHORT;.))
	   |   ("int"       (.typeLiteral = Type.INT;.))
	   |   ("float"     (.typeLiteral = Type.FLOAT;.))
	   |   ("void"      (.typeLiteral = Type.VOID;.))
	   |   ("String"    (.typeLiteral = new ObjectType("java.lang.String");.))
	   |   ("Vector"    (.typeLiteral = new ObjectType("java.util.Vector");.))
	)
.
/*----------------------------------formalParameterList----------------------------------*/
formalParameterList<Args args> =
    (.ArrayList<Type> types = new ArrayList<Type>();.)  
    (.ArrayList<String> names = new ArrayList<String>();.)
      
    (.Type typeLiteral = null;.)
    (
        type<out typeLiteral>       
        | 
        identifier<out String typeName>  
        (.
	         typeLiteral = objectTypes.get(typeName);
	         if(typeLiteral==null)
	         {   
	             typeLiteral = new ObjectType(typeName);
	             objectTypes.put(typeName, (ObjectType)typeLiteral);
	         }
        .)
    )
    (.types.add(typeLiteral);.)
	identifier<out String param>
	(.names.add(param);.)
	{
        ',' 
	    (
	        type<out typeLiteral>       
	        | 
	        identifier<out String typeName>  
	        (.
				 typeLiteral = objectTypes.get(typeName);
				 if(typeLiteral==null)
				 { 
				     typeLiteral = new ObjectType(typeName);
				     objectTypes.put(typeName, (ObjectType)typeLiteral);
				 }
	        .)
	    )
	   (.types.add(typeLiteral);.) 
	   identifier<out param>
	   (.names.add(param);.)
	}
	(.
	   args.argTypes = types.toArray(new Type[types.size()]);
	   args.argNames = names.toArray(new String[names.size()]);
	.)
.
/*----------------------------------classBody----------------------------------*/
classBody<ClassGen classGen> =
	'{'
	{
	    (.int modifier = 0;.)
		[accessSpecifier<out modifier>]
		(
            (
                IF(next(_openRoundBracket))
                // это конструктор
                (.log("con");.)
			        identifier<out String methodName>   
			        (.Args args = new Args();.)
			        openRoundBracket [formalParameterList<args>] closeRoundBracket
			        (.
                          InstructionList il = new InstructionList();
						  MethodGen methodGen = new MethodGen(
						      modifier,
						      new ObjectType(classGen.getClassName()), // todo сохранить
						      args.argTypes,
						      args.argNames,
						      "<init>",
						      classGen.getClassName(),
						      il,
						      classGen.getConstantPool()
						  );
                          log("method "+methodName+" created");
                          CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);						  
			        .) 
			        Statement<cw>
		    )
            |
            (   // это обычный член класса
                [finalAccess<out int fMod>      (.modifier |= fMod;.)]
                (.Type typeLiteral = null;.)
                (
                    type<out typeLiteral>       
                    | 
                    identifier<out String typeName>  
                    (.
                     typeLiteral = objectTypes.get(typeName);
                     if(typeLiteral==null)
                     {
                         typeLiteral = new ObjectType(typeName);
                         objectTypes.put(typeName, (ObjectType)typeLiteral);
                         log("added type "+typeName);
                     }
                    .)
                )
                (.log("method");.)
	            identifier<out String member>
                (
                    ( // это метод
                        (.Args args = new Args();.)
                        openRoundBracket [formalParameterList<args>] closeRoundBracket
                        (.
                            if (member.equals("main")) // наш "main"
                            {
                                if ( args.argTypes != null ) SemErr("too many args in main");
                                if ( !typeLiteral.equals(Type.VOID) ) SemErr("main cannot return a value. type must be \"void\"");
                                                            
                                modifier |= Constants.ACC_STATIC;
                                args.argTypes = new Type[]{ new ArrayType( Type.STRING, 1 ) };
                                args.argNames = new String[] { "argv" };
                                
                            } // todo передать х.б. 1 параметр
                            
                            InstructionList il = new InstructionList();
                            MethodGen methodGen = new MethodGen(
						      modifier,
						      typeLiteral,
						      args.argTypes,
						      args.argNames,
						      member,
						      classGen.getClassName(),
						      il,
						      classGen.getConstantPool()
                            );
                            log("method "+member+" created");
                            CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);
                        .) 
                        Statement<cw>
		            )
                    |
                    ( // это атрибут
                        (.
                            FieldGen fieldGen = new FieldGen(
                                modifier,
                                typeLiteral,
                                member,
                                classGen.getConstantPool()
                            );                            
                        .)
                        // запрещаем инициализировать поля сразу, т.к. это требует неявного создания к-ра
                        // пусть польз-ль сам пишет к-р и делает там, что хочет =)
                        ';'
                    )
	            )
            )
		)
	}
	'}'
.
/*----------------------------------interfaceBody----------------------------------*/
interfaceBody<ClassGen classGen> =
	'{'
	{
	   (.int modifier = 0;.)
		[accessSpecifier<out modifier>
		  (.     
		      if (modifier == Constants.ACC_PRIVATE || modifier == Constants.ACC_PROTECTED)
                SemErr("interface memebers ought to be public or default");
              modifier = Constants.ACC_PUBLIC;
          .)
		]
		[finalAccess<out int fMod>    (.modifier |= fMod;.)]
		[staticAccess<out int sMod>   (.modifier |= sMod;.)]
		(.Type typeLiteral = null;.)
		(
			type<out typeLiteral>       
			| 
			identifier<out String typeName>  
			(.
				 typeLiteral = objectTypes.get(typeName);
				 if(typeLiteral==null)
				 {
				     typeLiteral = new ObjectType(typeName);
				     objectTypes.put(typeName, (ObjectType)typeLiteral);
				 }
			.)
		)
		(.log("abstr method");.)
		identifier<out String methodName>	
		(.Args args = new Args();.)
		openRoundBracket [formalParameterList<args>] closeRoundBracket ';'
		(.
		  MethodGen methodGen = new MethodGen(
		      modifier,
              typeLiteral,
              args.argTypes,
              args.argNames,
              methodName,
              classGen.getClassName(),
              null, // instructions list
              classGen.getConstantPool()
		  );
		.)
	}
	'}'
.

/*---------------------------------------------------------------------------*
 *---------------------------- Statements -----------------------------------*
 *---------------------------------------------------------------------------*/
// инструкция
Statement<CodeWrapper cw>
=
  Block<cw>
| "if" ParExpression<cw> Statement<cw> [ "else" Statement<cw> ]
| "while" ParExpression<cw> Statement<cw>
| "return" [ Expression<cw> ] ";"
| "break;"
| "continue;"
| ";"
| Expression<cw> ';'  
.
/*---------------------------------------------------------------------------*/
// блок кода
Block<CodeWrapper cw>
= "{" { BlockStatement<cw> } "}"
.
/*---------------------------------------------------------------------------*/
// код состоит из объявлений и инструкций
BlockStatement<CodeWrapper cw>
=
Statement<cw>
|
(LocalVariableDeclaration<cw> ";")
.
/*---------------------------------------------------------------------------*/
// объявление переменной
LocalVariableDeclaration<CodeWrapper cw>
= 
(.
    InstructionFactory factory = new InstructionFactory( cw.classGen );
    Type typeLiteral = null;
.)
(
    type<out typeLiteral>       
    | 
    identifier<out String typeName>  
    (.
         typeLiteral = objectTypes.get(typeName);
         if(typeLiteral==null)
         {
             typeLiteral = new ObjectType(typeName);
             objectTypes.put(typeName, (ObjectType)typeLiteral);
         }
         cw.il.append( factory.createNew( typeLiteral.getSignature() ) );
    .)
)
identifier<out String varName>
(.
    // todo проверка, не объявлена ли ранее
    LocalVariableGen lg = cw.methodGen.addLocalVariable(varName, typeLiteral, null, null);
    cw.il.append( InstructionConstants.DUP ); 
.)
["=" (.log("init");.) Expression<cw> // здесь нам оставят результат на верхушке стека. мы его сохраняем в переменную 
(.
    StoreInstruction store = null;
    
    int name = lg.getIndex();
    if (typeLiteral.equals(Type.VOID))
        SemErr("void variables are not allowed");
    else if (
        typeLiteral.equals(Type.INT) ||
        typeLiteral.equals(Type.BYTE) ||
        typeLiteral.equals(Type.SHORT)
        )
        store = new ISTORE( name );
    else if ( typeLiteral.equals(Type.FLOAT) )
        store = new FSTORE( name );
    else if ( typeLiteral instanceof ObjectType )
        store = new ASTORE( name );
    else
        SemErr("unknown type "+typeLiteral.getSignature());
     
    lg.setStart( cw.il.append( store ) );
.)
] 
.
/*---------------------------------------------------------------------------*
 *---------------------------- Expressions ----------------------------------*
 *---------------------------------------------------------------------------*/
Expression<CodeWrapper cw>
= 
( lval<cw> AssignmentOperator<cw> (rval<cw> | lval<cw>) )
|
rval<cw>
.
/*---------------------------------lval--------------------------------------*/
lval<CodeWrapper cw>
=
(.log("lval");.)
identifier<out String varName>
| Selector<cw>
.
/*---------------------------------lval--------------------------------------*/
rval<CodeWrapper cw>
=
(.log("rval");.)
 "new" Creator<cw>
| Literal
| "(" (lval<cw> | rval<cw> ) Infixop ( lval<cw> | rval<cw>) ")"
| Selector<cw>
.
/*---------------------------------------------------------------------------*/
Selector<CodeWrapper cw>
=
( "this" | "super" | identifier<out String objVarName>) "."
(
    (
        IF(next(_openRoundBracket))
            identifier<out String field> 
            Arguments<cw>
    )
    |
    (
        identifier<out String field>
    )
)
.
/*---------------------------------------------------------------------------*/
// аргументы вызовов
Arguments<CodeWrapper cw>
=
// в скобках - пусто, одно или несколько выражений
"(" [ Expression<cw> { "," Expression<cw> } ] ")"
.
/*---------------------------------------------------------------------------*/
// литерал =)
Literal
= 
  (intLit
| floatLit
| charLit
| stringLit
| "true" | "false"
| "null")
(.log("lit="+t.val);.)
.
/*---------------------------------------------------------------------------*/
// вызов конструктора
Creator<CodeWrapper cw>
= 
    identifier<out String className> Arguments<cw>
.
/*---------------------------------------------------------------------------*/
// выражение в скобках
ParExpression<CodeWrapper cw>                         
=
"(" Expression<cw> ")"
.
/*---------------------------------------------------------------------------*/
// присвоение

AssignmentOperator<CodeWrapper cw>
= 
(.log("assgmnt");.)
  ("=" (..))
/*
//todo при наличии времени реализовать упрощённые присвоения, указанные ниже
| ("+=")
| ("-=")
| ("*=")
| ("/=")
| ("&=")
| ("|=")
| ("^=")
| ("%=")
*/
.
/*---------------------------------------------------------------------------*/
// бинарная операция
Infixop
= 
  ("||")
| ("&&")
| ("^")
| ("==")
| ("!=")
| ("<")
| (">")
| ("<=")
| (">=")
| ("+")
| ("-")
| ("*")
| ("/")
| ("%")
.
/*---------------------------------------------------------------------------*/
END CompilationUnit.
