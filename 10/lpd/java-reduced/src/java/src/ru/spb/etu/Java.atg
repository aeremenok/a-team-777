import java.util.ArrayList;
import java.util.Arrays;

import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ArithmeticInstruction;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IfInstruction;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LocalVariableGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;

COMPILER CompilationUnit

// Функция возвращает токен, следующий за текущим (заглядывает вперед)
boolean next(int i)
	{
		scanner.ResetPeek();
		Token peek = scanner.Peek();
		return (peek.kind == i);
	}
    // путь к генерируемым классам
    public static String filePath;
	
    // созданные классы
    public ParserImpl impl = new ParserImpl(this); 
    
    // логгер
    public void log(String msg)
    { System.err.println(msg); }
    
    // поиск
    public MethodParams getMethod( String name, Type[] argTypes, ClassGen classGen )
    { return impl.getMethod(name, argTypes, classGen );}

    public LocalVariableGen getVarGen( String name, MethodGen methodGen )
    { return impl.getVarGen(name,methodGen ); }
    
    public Field getFieldGen( String name, ClassGen classGen )
    { return impl.getFieldGen( name,classGen ); }
    
    public boolean isPresent(String typeName)
    { return impl.isPresent(typeName); }
    
    public boolean isDuplicate(String typeName)
    { return impl.isDuplicate(typeName); }
    
    public Instruction getStoreInstruction(Type type, int index)
    { return impl.getStoreInstruction(type, index); }
    
    public Instruction getLoadInstruction( Type type, int index )
    { return impl.getLoadInstruction( type, index ); }
    
    public void preparePrintStream(CodeWrapper cw)
    { impl.preparePrintStream(cw); }
    
    public void callPrintMethod(CodeWrapper cw, String method, Type[] argTypes)
    { impl.callPrintMethod(cw, method, argTypes); }
    
    public void addClass( String name, ClassGen classGen )
    { impl.addClass( name, classGen ); }
    
    public void addInterface( String name, ClassGen classGen )
    { impl.addInterface( name, classGen ); }
    
    public ClassGen getType( String name )
    { return impl.getType(name); }
    
    public boolean checkInterfaces( ClassGen classGen )
    { return impl.checkInterfaces( classGen ); }
/*--------------------------------------------------------------------------*/
CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  
  zero          = '0'.
  zeroToThree   = zero + "123".
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit.
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf. 

TOKENS
	id                 = letter { letter | digit }.
    return             = "return".
    new                = "new".
	openRoundBracket   = '('.
	closeRoundBracket  = ')'.
	openCurlyBracket   = '{'.
	closeCurlyBracket  = '}'.
	dot                = '.'.
	isequal            = '='.
	
    /*-------------------------------------------------------------------------*/
    intLit = 
	    ( zero | nonZeroDigit { digit } ).
    /*-------------------------------------------------------------------------*/
    floatLit =
        "." digit {digit} 
        [ ("e" | "E") ["+" | "-"] digit {digit} ] 
        [ "F" | "f"  ]
        | digit {digit} 
        (
            "." {digit} 
              [("e" | "E" ) ["+" | "-"] digit {digit} ] [ "F" | "f" ]
            | ("e" | "E") ["+" | "-"] digit {digit} [ "F" | "f" ]
            | "F" | "f"
        ).  
    /*-------------------------------------------------------------------------*/
    stringLit = 
        "\"" {
              stringChar
            | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" )
         } "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------identifier----------------------------------*/
identifier<out String value>
= 
id
(.  value = t.val;
    log("id="+t.val); .)
.
/*----------------------------------CompilationUnit----------------------------------*/
CompilationUnit = 
	typeDeclaration {typeDeclaration}
.
/*----------------------------------typeDeclaration----------------------------------*/
typeDeclaration =
    (. int specifier = 0;.)
    // xxx здесь не распознаются default %)
	[accessSpecifier<out specifier>]
	(
		interfaceDeclaration<specifier> 
		|
		classDeclaration<specifier>
	)
.
/*----------------------------------classDeclaration----------------------------------*/
classDeclaration<int modifier> =  
	"class"
	identifier<out String className>
	
	(.String superName = "java.lang.Object";.)
	[  "extends" identifier<out superName>
	   // проверка типов
	   (.  if(superName.equals(className)) SemErr("cannot self-inherit");
           isPresent(superName);
           if (impl.classes.get(superName)==null) SemErr(superName+" is not a class"); .) ]
           
	(.String interfaceName = null;.)
	[  "implements"identifier<out interfaceName>
	   // проверка типов
	   (.   if(interfaceName.equals(className)) SemErr("cannot self-implement");
            isPresent(interfaceName);
            if (impl.interfaces.get(interfaceName)==null) SemErr(interfaceName+" is not an interface");.) ]
            
	(. ClassGen classGen = new ClassGen(
	       className, 
	       superName, 
	       className+".class", 
	       modifier,
	       interfaceName==null ? null : new String[]{interfaceName} );
	       
	   addClass(className, classGen);
           
	   // todo пусть будет =)
	   classGen.addEmptyConstructor( Constants.ACC_PUBLIC );
	   log("class "+className+" created");.)
	   
	classBody<classGen>
	
    (.  checkInterfaces(classGen);
        try{ classGen.getJavaClass().dump( filePath+"/"+className+".class" ); }
        catch(Exception e){e.printStackTrace();}.)
.
/*----------------------------------interfaceDeclaration----------------------------------*/
interfaceDeclaration<int modifier> =
	"interface"
	identifier<out String interfaceName>
	
	(.String superInterfaceName = null;.)
    [  "extends" identifier<out superInterfaceName>
        (.  if(superInterfaceName.equals(interfaceName)) SemErr("cannot self-inherit");
            isPresent(superInterfaceName);
            if (impl.interfaces.get(superInterfaceName)==null) SemErr(superInterfaceName+" is not an interface");.) ]
            
	(. ClassGen classGen = new ClassGen(
	       interfaceName, 
	       "java.lang.Object", 
	       interfaceName+".class", 
	       Constants.ACC_INTERFACE | Constants.ACC_ABSTRACT,
	       superInterfaceName==null ? null : new String[]{superInterfaceName} 
	   );
       addInterface(interfaceName, classGen);
	   log("interface "+interfaceName+" created");.)
	      
	interfaceBody<classGen>
	
	(. try{ classGen.getJavaClass().dump( filePath+"/"+interfaceName+".class" ); }
	   catch(Exception e){e.printStackTrace();}.)
.
/*----------------------------------accessSpecifier----------------------------------*/
accessSpecifier<out int specifier> =
	(.specifier = 0;.)
	// todo добавить остальные
"public"       (.specifier = Constants.ACC_PUBLIC;.)
.
/*----------------------------------basicType----------------------------------*/
basicType<out Type typeLiteral> =
    (.typeLiteral = null;.)
	(
	       ("boolean"   (.typeLiteral = Type.BOOLEAN;.))
	   |   ("int"       (.typeLiteral = Type.INT;.))
	   |   ("float"     (.typeLiteral = Type.FLOAT;.))
	   |   ("void"      (.typeLiteral = Type.VOID;.))
	   |   ("String"    (.typeLiteral = new ObjectType("java.lang.String");.))
	   //|   ("Vector"    (.typeLiteral = new ObjectType("java.util.Vector");.))
	)
.
/*----------------------------------type----------------------------------*/
type<out Type typeLiteral> (.typeLiteral=null;.) = 
    basicType<out typeLiteral>       
|   identifier<out String typeName> (.if(!isPresent(typeName)) typeLiteral = new ObjectType(typeName);.)
.
/*----------------------------------formalParameterList----------------------------------*/
formalParameterList<Args args> =
    (.  ArrayList<Type> types = new ArrayList<Type>();  
        ArrayList<String> names = new ArrayList<String>();
        Type typeLiteral=null;.)
    type<out typeLiteral>           (.types.add(typeLiteral);.)
	identifier<out String param>    (.names.add(param);.)
	{   ',' 
        type<out typeLiteral>   (.types.add(typeLiteral);.) 
        identifier<out param>   (.names.add(param);.)
	}
	(. args.argTypes = types.toArray(new Type[types.size()]);
	   args.argNames = names.toArray(new String[names.size()]);.)
.
/*----------------------------------classBody----------------------------------*/
classBody<ClassGen classGen> =
	'{'
	{
	    (.int modifier = 0;.)
		[accessSpecifier<out modifier>]
		(
            (
                IF(next(_openRoundBracket))
                // это конструктор
			        identifier<out String methodName>   
			        (.  if (!methodName.equals(classGen.getClassName())) SemErr("wrong constructor name "+methodName);
                        else {
                            Args args = new Args(); .)
			        '(' [formalParameterList<args>] ')'
			        (.   	if (getMethod(methodName, args.argTypes, classGen)==null) {
								InstructionList il = new InstructionList();
								MethodGen methodGen = new MethodGen(
									modifier,
									new ObjectType(classGen.getClassName()),
									args.argTypes,
									args.argNames,
									"<init>",
									classGen.getClassName(),
									il,
									classGen.getConstantPool()
								);
								log("method "+methodName+" created");
								CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);	.) 
			        Statement<cw>
			        (.       	if (cw.il.getLength()==0)
								    cw.append( InstructionConstants.RETURN );
								    
								cw.methodGen.setMaxStack();
								classGen.addMethod(cw.methodGen.getMethod());
							} else SemErr("duplicate constructor "+methodName);
                        } .) 
		    )
            |
            (   // это обычный член класса
                (.Type typeLiteral = null;.)
                type<out typeLiteral>
	            identifier<out String member>
                (
                    ( // это метод
                        (.Args args = new Args();.)
                        '(' [formalParameterList<args>] ')'
                        (.  if (getMethod(member, args.argTypes, classGen)==null) {
	                            if (member.equals("main")) { // наш "main"
	                                if ( args.argTypes != null ) SemErr("too many args in main");
	                                if ( !typeLiteral.equals(Type.VOID) ) SemErr("main cannot return a value. type must be \"void\"");
	                                                            
	                                modifier = Constants.ACC_STATIC | Constants.ACC_PUBLIC;
	                                args.argTypes = new Type[]{ new ArrayType( Type.STRING, 1 ) };
	                                args.argNames = new String[] { "argv" };
	                            } // todo передать х.б. 1 параметр
                            
                                InstructionList il = new InstructionList();
								MethodGen methodGen = new MethodGen(
									modifier,
									typeLiteral,
									args.argTypes,
									args.argNames,
									member,
									classGen.getClassName(),
									il,
									classGen.getConstantPool()
								);
	                            log("method "+member+" created");
	                            CodeWrapper cw = new CodeWrapper(classGen, il, methodGen);
                        .) 
                        Statement<cw>
                        (.      if (cw.il.getLength()==0 || typeLiteral.equals(Type.VOID) )
                                    cw.append( InstructionConstants.RETURN );
                                if ( !typeLiteral.equals(Type.VOID) && !cw.returned )
                                    SemErr(member+" must return a value");

                                cw.methodGen.setMaxStack();
                                classGen.addMethod(cw.methodGen.getMethod());
                            } else SemErr("duplicate method "+member); .)
		            )
                    |
                    ( // это атрибут
                        (.  FieldGen fieldGen = new FieldGen(
                                modifier,
                                typeLiteral,
                                member,
                                classGen.getConstantPool() ); 
                            if ( Arrays.asList(classGen.getFields()).contains(fieldGen.getField()) )
                                SemErr("duplicate field "+member);
                            else  
                                classGen.addField( fieldGen.getField() ); .)
                        // запрещаем инициализировать поля сразу, т.к. это требует неявного создания к-ра
                        // пусть польз-ль сам пишет к-р и делает там, что хочет =)
                        ';'
                    )
	            )
            )
		)
	}
	'}'
.
/*----------------------------------interfaceBody----------------------------------*/
interfaceBody<ClassGen classGen> =
	'{'{
        (.int modifier = 0;.)
		[accessSpecifier<out modifier>
			(.if (modifier == Constants.ACC_PRIVATE || modifier == Constants.ACC_PROTECTED)
	            SemErr("interface memebers ought to be public or default"); .)]
		(.modifier = Constants.ACC_PUBLIC;
		  Type typeLiteral = null;.)
		type<out typeLiteral>
		identifier<out String methodName>	
		(.Args args = new Args();.)
		'(' [formalParameterList<args>] ')' ';'
		(.MethodGen methodGen = new MethodGen(
		      modifier | Constants.ACC_ABSTRACT,
              typeLiteral,
              args.argTypes,
              args.argNames,
              methodName,
              classGen.getClassName(),
              null, // instructions list
              classGen.getConstantPool()
		  );
		  methodGen.setMaxStack();
          classGen.addMethod(methodGen.getMethod()); .)
	}'}'
.

/*---------------------------------------------------------------------------*
 *---------------------------- Statements -----------------------------------*
 *---------------------------------------------------------------------------*/
// инструкция
Statement<CodeWrapper cw>
=
Block<cw>
  
| ( "if" '(' (.IfInstruction ifinstr = new IFEQ(null);.)
           ['!' (.ifinstr = new IFNE(null);.)]
           Expression<out Type exprType, cw> ')' 
    (.cw.il.append(ifinstr);.) 
    Statement<cw>       (.GOTO g = new GOTO(null); cw.il.append(g);.) 
    [   "else"          (.ifinstr.setTarget( cw.append(new NOP()) );.) 
        Statement<cw>  ] 
    (.  InstructionHandle elseEndH = cw.append(new NOP()); 
        g.setTarget(elseEndH);
        if (ifinstr.getTarget()==null) ifinstr.setTarget(elseEndH); .) )

| ( "while" '(' (.IfInstruction ifinstr = new IFEQ(null);.)
              ['!' (.ifinstr = new IFNE(null);.) ]
              Expression<out Type exprType, cw> ')' 
    (. InstructionHandle begin = cw.last; // перевычисление выражения todo проверить со сложными 
       cw.append(ifinstr); .) 
	Statement<cw> 
	(. GOTO g = new GOTO(begin); cw.append(g);
	   InstructionHandle end = cw.append(new NOP()); ifinstr.setTarget(end); .) )

| ( Expression<out Type exprType, cw> ';' )  
.
/*---------------------------------------------------------------------------*/
// блок кода
Block<CodeWrapper cw>
= "{" { BlockStatement<cw> } "}"
.
/*---------------------------------------------------------------------------*/
// код состоит из объявлений и инструкций
BlockStatement<CodeWrapper cw>
=
  ( "return" (.Type exprType = Type.VOID;.) [Expression<out exprType, cw> ]
    (.  if (!cw.returned){
            cw.append( impl.getReturnInstruction(exprType) );
            cw.returned = true;
        } else SemErr("only 1 return statement is allowed");.) ";" )
  |
  (
    (   IF(next(_id))
            LocalVariableDeclaration<cw> ";" )
|   (   Statement<cw> )
)
.
/*---------------------------------------------------------------------------*/
// объявление переменной
LocalVariableDeclaration<CodeWrapper cw>
= 
(.  InstructionFactory factory = new InstructionFactory( cw.classGen );
    Type typeLiteral = null; .)
type<out typeLiteral>  
identifier<out String varName>
(.  if (getVarGen(varName, cw.methodGen)!=null)
        SemErr("duplicate local variable "+varName);
    else if (typeLiteral!=null)
    {
        LocalVariableGen lg = cw.methodGen.addLocalVariable(varName, typeLiteral, null, null); .)
["=" Expression<out Type exprType, cw> // здесь нам оставят результат на верхушке стека. мы его сохраняем в переменную 
(.      log("init");
	    if ( !typeLiteral.equals(exprType) && !exprType.equals(Type.NULL) 
	         && !impl.instance_of(typeLiteral, exprType) )
	        SemErr("incompatible types: expected "+typeLiteral+", got "+exprType);
	    else {   
			Instruction store = getStoreInstruction(typeLiteral, lg.getIndex());
			lg.setStart( cw.append( store ) );
			lg.setEnd(null);
			impl.update(lg, exprType);
		}
    }.) ] 
.

/*---------------------------------------------------------------------------*
 *---------------------------- Expressions ----------------------------------*
 *---------------------------------------------------------------------------*/
Expression<out Type exprType, CodeWrapper cw>
// цель - оставить что-то на верхушке стека
= 
(.exprType = null;.)
(       // заглушки
      ( "System.out.println"                (.preparePrintStream(cw);.)
         Arguments<out Type[] argTypes, cw> (.callPrintMethod(cw, "println", argTypes); .) )
    | ( "System.out.print"                  (.preparePrintStream(cw);.)
         Arguments<out Type[] argTypes, cw> (.callPrintMethod(cw, "print", argTypes); .) )     
    | ( "new" Creator<out exprType, cw> )
    | Literal<out exprType, cw>
    | ( '!' Expression<out exprType, cw>    
        (.if (!exprType.equals(Type.BOOLEAN)) SemErr("cannot negate non-boolean expression");
            IfInstruction ifinstr = new IFNE(null);
                cw.il.append(ifinstr);
                cw.il.append(new ICONST(1));
                GOTO g = new GOTO(null);
                cw.il.append(g);
            ifinstr.setTarget(
                cw.il.append( new ICONST(0) ) 
                );
            g.setTarget( cw.il.append(new NOP()) ); .) )
    | ( '(' Expression<out exprType, cw> (.InstructionList il = null;.)
            ( 
                Infixop<out il, exprType> 
                |
                Relational<out il, exprType>
            ) 
            Expression<out Type exprTypeRight, cw> ')'
        (.  if (
                !(
                    (exprType instanceof ObjectType) && (exprTypeRight.equals(Type.NULL))
                    ||
                    (exprTypeRight instanceof ObjectType) && (exprType.equals(Type.NULL))
                )
                &&
                !((exprType instanceof ObjectType) && (exprTypeRight instanceof ObjectType))
                &&
                (exprType == null || !exprType.equals(exprTypeRight))
                )
                SemErr("operand types mismatch "+exprType+" != "+exprTypeRight);
            else cw.il.append(il);.) )
    |
    (. String className= cw.classGen.getClassName();
       int objIndex = -1;.)
    ( // операции с объектами
        (
            IF(next(_dot))
                (
                    "this"  (.objIndex = 0;.)  
                  | "super" (.objIndex = 0; className = cw.classGen.getSuperclassName();.)
                  | identifier<out String objVarName>
                  (.LocalVariableGen lg = getVarGen(objVarName, cw.methodGen);
                    if (lg==null)
                        SemErr("no such variable "+objVarName);
                    else
                        className = impl.realType(lg).toString();
                    log("className="+className);
                    
                    objIndex = lg.getIndex();.)
                ) "."
                Selector<out exprType, cw, className, objIndex>
        )
        |
        (
              "this" 
              (. exprType = new ObjectType(cw.classGen.getClassName());
                 if (cw.methodGen.isStatic()) SemErr("no enclosing instance");
                 else cw.append(new ALOAD(0)); .)
            | Selector<out exprType, cw, className, 0>
        ) 
    )
)
.
/*---------------------------------------------------------------------------*/
Selector<out Type selType, CodeWrapper cw, String className, int objIndex>
(.  selType = null; .)
=
(
	(
	    IF(next(_openRoundBracket))
	       // забрасываем в стек объект и вызываем его метод
	       (.
	           if (cw.methodGen.isStatic() && objIndex==0)
                    SemErr("no enclosing instance of "+cw.classGen.getClassName());
	           cw.append(new ALOAD(objIndex));.)
	       call<out selType, cw, className>
	)
	|
	( var<out selType, cw, className, objIndex> ) // иначе - присвоение левой части - значения
)
.
/*---------------------------------------------------------------------------*/
call<out Type selType, CodeWrapper cw, String className>
=
    identifier<out String method>
    Arguments<out Type[] argTypes, cw>
	(.  // в стеке лежат значения аргументов, вызываем метод
	    InstructionFactory factory = new InstructionFactory( cw.classGen );
	    
	    MethodParams mp = getMethod(method, argTypes, getType(className) );
	    if (mp==null) {SemErr("no such method "+method); selType=null;}
	    else {
	        selType = mp.method.getReturnType();
		    cw.append( factory.createInvoke(
		        getType(mp.className).getClassName(),
		        mp.method.getName(),
		        selType,
		        mp.method.getArgumentTypes(), 
		        Constants.INVOKEVIRTUAL
		    ) );
		} .)
.
/*---------------------------------------------------------------------------*/
var<out Type selType, CodeWrapper cw, String className, int objIndex>
=
(.selType = null;.)
(
	(
	    IF(next(_isequal))
	        identifier<out String var>
	        (. // куда сохранять
	           Field fg = null;
               LocalVariableGen lg = getVarGen(var, cw.methodGen);
	           if (lg==null) {
	               fg = getFieldGen(var, getType(className));
	               if( fg == null ) SemErr("no such variable or field "+var);
	               else  { // это поле
	                   selType = fg.getType();
	                   cw.append(new ALOAD(objIndex));
	               }
	           }
	           else selType = lg.getType();  /* это переменная */ .)
	        '=' Expression<out Type exprType, cw>
			(.  InstructionFactory factory = new InstructionFactory( cw.classGen );
		        if (!selType.equals(exprType) && !exprType.equals(Type.NULL) )
		           SemErr("incompatible types: expected "+selType+", got "+exprType);
		        else {
		            if (lg!=null) {
			            Instruction store = getStoreInstruction(selType, lg.getIndex());
			            cw.append( store );
			            impl.update(lg, exprType);
			            if (lg.getStart()==null) // переменная еще не инициализирована
                            lg.setStart( cw.last );
		            } else if (fg!=null)
                                cw.append( factory.createFieldAccess( 
                                                        className, 
                                                        fg.getName(), 
                                                        selType, 
                                                        Constants.PUTFIELD ) );
		         }.)
	)
	|
	( access<out selType, cw, className, objIndex> ) // иначе - взятие значения
)
.
/*---------------------------------------------------------------------------*/
access<out Type selType, CodeWrapper cw, String className, int objIndex>
=
identifier<out String var>
(. LocalVariableGen lg = getVarGen(var, cw.methodGen);
   if (lg==null) {
       Field fg = getFieldGen(var, cw.classGen);
       if( fg == null ) { SemErr("no such variable or field "+var); selType = null;}
       else { // это поле
           selType = fg.getType();
           
			if (cw.methodGen.isStatic() && objIndex==0)
			    SemErr("no enclosing instance of "+cw.classGen.getClassName());
			cw.append(new ALOAD(objIndex));
           
           InstructionFactory factory = new InstructionFactory( cw.classGen );
           cw.append( factory.createFieldAccess( 
                        className, 
                        fg.getName(), 
                        selType, 
                        Constants.GETFIELD ) );    
       }
   } else { // это переменная
       selType = lg.getType();
       Instruction instr = getLoadInstruction(selType, lg.getIndex());
       cw.append(instr);
   } .)
.
/*---------------------------------------------------------------------------*/
// аргументы вызовов. задача аргументов - лечь в стек, чтобы их принял метод
Arguments<out Type[] argTypes, CodeWrapper cw>
=
(.ArrayList<Type> types = new ArrayList<Type>();.)
'(' [   Expression<out Type exprType, cw>       (.types.add(exprType);.)
        { ',' Expression<out exprType, cw>      (.types.add(exprType);.) } ] ')'
(.argTypes = types.toArray(new Type[types.size()]);.)
.
/*---------------------------------------------------------------------------*/
// литерал
Literal<out Type exprType, CodeWrapper cw> (.exprType = null;.)
= 
(.  Object value = null;
	InstructionFactory factory = new InstructionFactory( cw.classGen );
	log("lit="+la.val); .)
( 	  intLit            (.exprType = Type.INT; value = new Integer(t.val);.)
	| floatLit          (.exprType = Type.FLOAT; value = new Float(t.val);.)
	| "true"            (.exprType = Type.BOOLEAN; value = new Boolean(t.val);.)
	| "false"           (.exprType = Type.BOOLEAN; value = new Boolean(t.val);.)
    | stringLit         (.exprType = new ObjectType("java.lang.String"); value = t.val.substring(1, t.val.length()-1);.)
) (. cw.append( factory.createConstant( value )); .)
| "null"            (.exprType = Type.NULL; cw.append( new ACONST_NULL());.)
.
/*---------------------------------------------------------------------------*/
// вызов конструктора
Creator<out Type createdType, CodeWrapper cw>
= 
(.String className=null;.)
identifier<out className> Arguments<out Type[] argTypes, cw>
(.  // в стеке лежат значения аргументов, вызываем метод
    if (isPresent(className))
        createdType = null;
    else {
	    InstructionFactory factory = new InstructionFactory( cw.classGen );
        cw.append( factory.createNew( getType(className).getClassName() ) );
        cw.append( InstructionConstants.DUP );
	    cw.append( factory.createInvoke(
	        getType(className).getClassName(),
	        "<init>",
	        Type.VOID,
	        argTypes, 
	        Constants.INVOKESPECIAL 
	    ) );
	    createdType = new ObjectType(className);
    } .)
.
/*---------------------------------------------------------------------------*/
// бинарная операция
Infixop<out InstructionList il, Type exprType>
(. il = new InstructionList();
   ArithmeticInstruction instr = null;.)
= 
(
	  ("||" (. if (exprType.equals(Type.BOOLEAN)) instr = new IOR();
		       else SemErr("cannot apply || to "+exprType); .) )
	| ("&&" (. if (exprType.equals(Type.BOOLEAN)) instr = new IAND();
	           else SemErr("cannot apply && to "+exprType); .) )
	| ("+"  (. if (exprType.equals(Type.INT)) instr = new IADD();
	           else if (exprType.equals(Type.FLOAT) ) instr = new FADD();
	           else SemErr("cannot apply + to "+exprType); .) )
	| ("-"  (. if (exprType.equals(Type.INT)) instr = new ISUB();
	           else if (exprType.equals(Type.FLOAT) ) instr = new FSUB();
	           else SemErr("cannot apply - to "+exprType); .) )
	| ("*"  (. if (exprType.equals(Type.INT)) instr = new IMUL();
	           else if (exprType.equals(Type.FLOAT) ) instr = new FMUL();
	           else SemErr("cannot apply * to "+exprType); .) )
	| ("/"  (. if (exprType.equals(Type.INT)) instr = new IDIV();
	           else if (exprType.equals(Type.FLOAT) ) instr = new FDIV();
	           else SemErr("cannot apply / to "+exprType); .) )
	| ("%"  (. if (exprType.equals(Type.INT)) instr = new IREM();
	           else if (exprType.equals(Type.FLOAT) ) instr = new FREM();
	           else SemErr("cannot apply % to "+exprType); .) )
)
(.if (instr != null) il.append(instr);.)
.
/*---------------------------------------------------------------------------*/
Relational<out InstructionList il, Type exprType> 
  (.il = new InstructionList();
  IfInstruction ifinstr = null; .)
=
(
  ("==") (.ifinstr = impl.getIFCMPNE(exprType);.)
| ("!=") (.ifinstr = impl.getIFCMPEQ(exprType);.)
| ("<")  (.ifinstr = impl.getIFCMPGT(exprType);.)
| (">")  (.ifinstr = impl.getIFCMPLT(exprType);.)
| ("<=") (.ifinstr = impl.getIFCMPLE(exprType);.)
| (">=") (.ifinstr = impl.getIFCMPGE(exprType);.)
)
  (. if (ifinstr!=null){
	    il.append(ifinstr);
	    il.append(new ICONST(1));
	    GOTO g = new GOTO(null);
	    il.append(g);
	    ifinstr.setTarget( il.append(new ICONST(0)) );
	    g.setTarget( il.append(new NOP()) ); 
    } .)
.
/*---------------------------------------------------------------------------*/
END CompilationUnit.
