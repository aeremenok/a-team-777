COMPILER CompilationUnit

// Функция возвращает токен, следующий за текущим (заглядывает вперед)
bool next(int i)
    {
       scanner->ResetPeek();
       Token* x = scanner->Peek();
       return x->kind == i;
    };
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  dot = '.'.
  stringCh  = ANY - '"' - cr - lf. 
/* спец символы
   stringCh  = ANY - '"' - '\\' - cr - lf.
   printable =  '\u0020' .. '\u007e'.
   string  = '"' { stringCh | '\\' printable } '"'.
*/


TOKENS
	identifier  = letter { letter | digit }.
	realNumber =             ['-']  [digit { digit }  dot]  digit { digit } ["e-" digit {digit}] .
	string = '"' {stringCh} '"'.
	interface =		"interface".
	final=			"final".
	static =		"static".
	openRoundBracket = '('.
	closeRoundBracket = ')'.
	openCurlyBracket = '{'.
	closeCurlyBracket = '}'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS
/*----------------------------------CompilationUnit----------------------------------*/
CompilationUnit =
	typeDeclaration {typeDeclaration}
.
/*----------------------------------typeDeclaration----------------------------------*/
typeDeclaration =
	[accessSpecifier]
	(interfaceDeclaration | classDeclaration)
.
/*----------------------------------classDeclaration----------------------------------*/
classDeclaration =
	[final][static]
	"class"
	identifier
	["extends" identifier]
	["implements" identifier {',' identifier}]
	classBody
.
/*----------------------------------interfaceDeclaration----------------------------------*/
interfaceDeclaration =
	"interface"
	identifier
   ["extends" identifier]
	interfaceBody
.
/*----------------------------------accessSpecifier----------------------------------*/
accessSpecifier =
	("public" | "protected" | "private" )
.
/*----------------------------------type----------------------------------*/
type =
	("byte" | "short" | "int" | "long" | "char"| "float" | "double" | "bool" | "void")
.
/*----------------------------------formalParameterList----------------------------------*/
formalParameterList =
	(type | identifier) identifier
	{',' (type | identifier) identifier}
.
/*----------------------------------classBody----------------------------------*/
classBody =
	'{'
	{
		[accessSpecifier]
		((IF(next(_openRoundBracket))
			identifier
			openRoundBracket [formalParameterList] closeRoundBracket 
				openCurlyBracket {statement} closeCurlyBracket
		)
		|
		(
		[final]
		[static]
		(IF(next(_identifier))
			(type | identifier)
			identifier
			(
				(
					openRoundBracket [formalParameterList] closeRoundBracket 
						openCurlyBracket {statement} closeCurlyBracket
				)
			|
				(
					['=' expression] ';'
				)
			)
		)
		)
		)
	}
	'}'
.
/*----------------------------------statement----------------------------------*/
statement =	
	(
		("if" openRoundBracket expression closeRoundBracket 
			((openCurlyBracket {statement} closeCurlyBracket) | statement)
			["else" ((openCurlyBracket {statement} closeCurlyBracket) | statement)]
		)
		|("while" openRoundBracket expression closeRoundBracket 
			((openCurlyBracket {statement} closeCurlyBracket) | statement))
		|("return" [expression] ';')
		|("new" expressionName openRoundBracket [expression] closeRoundBracket)
		|(openCurlyBracket {statement} closeCurlyBracket)
		|(type identifier ['=' expression]
			{',' identifier ['=' expression]} ';')
		|(identifier ['('[expression {',' expression}]')'] 
		   {'.' identifier ['('[expression {',' expression}]')']}
			((identifier ['=' expression] {',' identifier ['=' expression]} ';')
			|/*(openRoundBracket [expression {',' expression}] closeRoundBracket */';'/*)*/
			|(assignmentOperator expression ';')
			))
		|("super" {'.' identifier} 
			openRoundBracket [expression {',' expression}] closeRoundBracket ';')
	)
.

/*----------------------------------interfaceBody----------------------------------*/
interfaceBody =
	'{'
	{
		[accessSpecifier]
		[final]
		[static]
		(type | identifier)
		identifier	
		openRoundBracket [formalParameterList] closeRoundBracket ';'
	}
	'}'
.
/*----------------------------------expression----------------------------------*/
expression =
	conditionalOrExpression 
.
/*----------------------------------conditionalOrExpression----------------------------------*/
conditionalOrExpression =
	conditionalAndExpression {"||" conditionalOrExpression}
.
/*----------------------------------conditionalAndExpression----------------------------------*/
conditionalAndExpression =
	inclusiveOrExpression {"&&" conditionalAndExpression}
.
/*----------------------------------inclusiveOrExpression----------------------------------*/
inclusiveOrExpression =
	exclusiveOrExpression {'|' inclusiveOrExpression}
.
/*----------------------------------exclusiveOrExpression----------------------------------*/
exclusiveOrExpression =
	andExpression {'^' exclusiveOrExpression}
.
/*----------------------------------andExpression----------------------------------*/
andExpression =
	equalityExpression {'&' andExpression}
.
/*----------------------------------equalityExpression----------------------------------*/
equalityExpression =
	relationalExpression {("==" | "!=") equalityExpression}
.
/*----------------------------------relationalExpression----------------------------------*/
relationalExpression =
	shiftExpression {("<" | ">" | "<=" | ">=") relationalExpression}
.
/*----------------------------------shiftExpression----------------------------------*/
shiftExpression =
	additiveExpression {("<<" | ">>" | "<<<" ) shiftExpression}
.
/*----------------------------------additiveExpression----------------------------------*/
additiveExpression =
	multiplicativeExpression {('+' | '-' ) additiveExpression}
.
/*----------------------------------multiplicativeExpression----------------------------------*/
multiplicativeExpression =
	unaryExpression {('*' | '/' | '%' ) multiplicativeExpression}
.
/*----------------------------------unaryExpression----------------------------------*/
unaryExpression =
	expressionName {('*' | '/' | '%' ) unaryExpression}
.
/*----------------------------------expressionName----------------------------------*/
expressionName =
	(((identifier | "super") ['('[expression {',' expression}]')'] 
	   {'.' identifier['('[expression {',' expression}]')']}) | (realNumber)|(string))
.
/*----------------------------------assignmentOperator----------------------------------*/
assignmentOperator =
	("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=")
.
END CompilationUnit.
