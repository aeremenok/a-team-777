SUBJECT: лабораторная работа 1 

AUTHOR: eav, epa, 3351

STARTING TEXT: Выбор среды и окружения для разработки приложений

/* любые варианты с уверенностью больше 0 - верны
DISPLAY THRESHOLD: 0

/* уверенность 0-10
PROBABILITY SYSTEM: 2

DISPLAY RULES: YES

/* пользуемся только первым правилом
DERIVATION:F

CHOICES:     /*  начало списка решений
C> Java
C> C++
C> C#
C> Python
C> Ruby

QUALIFIERS:    /* начало списка показателей
Q> Generic
V> Static typing
V> Garbage Collection
V> Aliases

Q> Value types
V> Typed Enumeration/Boolean 
V> Long double floating point (80bit)
V> Complex and Imaginary 
V> Rational 
V> Arbitrary Precision Arithmetic
V> Regular Expression 

Q> Arrays
V> Lightweight array 
V> Array bounds checking 
V> Array slicing 
V> Array of bits / Finite set 

Q> Other Data Models 
V> List 
V> Hash 
V> Abstract collection 

Q> Functions 
V> Function delegates 
V> Function overloading 
V> Out function parameters 
V> Nested functions 
V> Function literals 
V> Dynamic closures 
V> Lexical closures 
V> Currifying 
V> Non-class functions 

Q> OOP
V> Modules/Namespaces 
V> Multiple Inheritance
V> Interfaces 
V> Fine grain export control 
V> Inner classes 
V> Operator overloading 
V> Covariant return types 
V> Generics 

Q> Multilevel programming
V> Templates or executable macros
V> Reflection/Introspection
V> Dynamic inheritance change
V> Dynamic class creation
V> Dynamic method creation
V> Dynamic class loading
V> Dynamic class unloading

Q> Performance
V> Inline assembler
V> Direct access to hardware
V> Lightweight objects
V> Explicit memory allocation control
V> Independent of VM
V> Direct native code gen
V> Implicit Parallelism/Scheduling

Q> Reliability
V> Design by Contract
V> Unit testing
V> Static construction order
V> Guaranteed initialization
V> RAII
V> Explicit memory allocation control
V> try-catch-finally blocks
V> Thread synchronization primitives

Q> Compatibility with C
V> Syntax style
V> Direct access to C
V> Use existing debuggers
V> Generates standard object files
V> Independent of macro preprocessor

Q> Other
V> Conditional compilation
V> String switches

/* правила
RULE: общее
    IF: 
    Generic {Static typing}
    THEN: 
         >Java: Probability = 9
    AND: >C++: Probability = 9
    AND: >C#: Probability = 9
    ELSE:
    IF:
    Generic {Garbage Collection}
    THEN: 
         >Java: Probability = 9
    AND: >C#: Probability = 9
    AND: >Python: Probability = 9
    AND: >Ruby: Probability = 9
    ELSE:
    IF:
    Generic {Aliases}
    THEN:
         >Java: Probability = 3
    AND: >C++: Probability = 9
    AND: >C#: Probability = 9
    AND: >Python: Probability = 9
    AND: >Ruby: Probability = 9
    
    NOTE: правило записано в текстовом редакторе
    REFERENCE: это простой пример описания БЗ

ENDING TEXT: СПАСИБО ЗА ВНИМАНИЕ
