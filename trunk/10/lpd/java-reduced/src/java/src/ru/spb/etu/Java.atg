import org.apache.bcel.Constants;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.Type;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.InstructionList;

import java.util.ArrayList;
import java.util.HashMap;

COMPILER CompilationUnit

// Функция возвращает токен, следующий за текущим (заглядывает вперед)
boolean next(int i)
	{
		scanner.ResetPeek();
		Token peek = scanner.Peek();
		return (peek.kind == i);
	}
	
	void checkTypes()
    {
        for ( String typeName : objectTypes.keySet() )
        {
            if (
                !typeName.equals("String") && 
                !typeName.equals("Vector") &&
                !classes.keySet().contains( typeName ) 
                )
            {
                SemErr( "type " + typeName + " not found" );
            }
        }
    }
    
    public class Args
    {
        Type[] argTypes = null;
        String[] argNames = null;
    }
    
    public void log(String msg)
    {
        System.out.println(msg);        
    }

	class ExprKind
	{
	    static final int NONE     = 0;
	    static final int CONDEXPR = 17;
	    static final int APPLY    = 25;
	    static final int NEWCLASS = 26;
	    static final int NEWARRAY = 27;
	    static final int PARENS   = 28;
	    static final int ASSIGN   = 29;
	    static final int TYPECAST = 30;
	    static final int TYPETEST = 31;
	    static final int SELECT   = 33;
	    static final int IDENT    = 34;
	    static final int LITERAL  = 35;
	    static final int POS      = 41;
	    static final int NEG      = 42;
	    static final int NOT      = 43;
	    static final int COMPL    = 44;
	    static final int PREINC   = 45;
	    static final int PREDEC   = 46;
	    static final int POSTINC  = 47;
	    static final int POSTDEC  = 48;
	    static final int BINARY   = 50;
	}
	
	class ExprInfo
	{
	    private int    kind = ExprKind.NONE;
	
	    public ExprInfo(
	        Parser parser )
	    {
	    }
	
	    public int getKind()
	    {
	        return kind;
	    }
	
	    public void setKind(
	        int k )
	    {
	        kind = k;
	    }
	
	    public void checkExprStat()
	    {
	        if ( 
	               kind != ExprKind.APPLY && 
	               kind != ExprKind.NEWCLASS && 
	               kind != ExprKind.ASSIGN &&
	               kind != ExprKind.PREINC && 
	               kind != ExprKind.PREDEC && 
	               kind != ExprKind.POSTINC && 
	               kind != ExprKind.POSTDEC 
	           )
	        {
	            SemErr( "not a statement (" + kind + ")" );
	        }
	    }
	}
	
    public HashMap<String, ClassGen> classes = new HashMap<String, ClassGen>();
    public HashMap<String, ObjectType> objectTypes = new HashMap<String, ObjectType>();
/*--------------------------------------------------------------------------*/
CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  
  zero          = '0'.
  zeroToThree   = zero + "123".
  octalDigit    = zero + "1234567". 
  nonZeroDigit  = "123456789".
  digit         = '0' + nonZeroDigit.
  hexDigit      = digit + "ABCDEFabcdef".
  letter        = 'A' .. 'Z' + 'a' .. 'z' + '_' + '$'.

  char          = ANY - "'" - '\\' - cr - lf.
  stringChar    = ANY - "\"" - '\\' - cr - lf. 

TOKENS
	id                 = letter { letter | digit }.
	openRoundBracket   = '('.
	closeRoundBracket  = ')'.
	openCurlyBracket   = '{'.
	closeCurlyBracket  = '}'.
	
    /*-------------------------------------------------------------------------*/
    intLit = 
	    ( 
	          zero
	        | nonZeroDigit { digit }
	        | ( "0x" | "0X" ) hexDigit { hexDigit }
	        | '0' octalDigit { octalDigit }
	    ) [ "l" | "L" ].
    /*-------------------------------------------------------------------------*/
    floatLit =
        "." digit {digit} 
        [ ("e" | "E") ["+" | "-"] digit {digit} ] 
        [ "F" | "f" | "D" | "d" ]
        | digit {digit} 
        (
            "." {digit} 
            [("e" | "E" ) ["+" | "-"] digit {digit} ] [ "F" | "f" | "D" | "d" ]
            |
            ("e" | "E") ["+" | "-"] digit {digit} [ "F" | "f" | "D" | "d" ]
            |
            "F" | "f" | "D" | "d"
        ).  
    /*-------------------------------------------------------------------------*/
    charLit = 
        "'"
        (
            char
            |
            "\\"
            (
                "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "u" { "u" }
                hexDigit hexDigit hexDigit hexDigit
                | 
                zeroToThree [ octalDigit ] [ octalDigit ]
                |
                octalDigit [ octalDigit ]
            )
        ) 
        "'".
    /*-------------------------------------------------------------------------*/
    stringLit = 
        "\""
        {
            stringChar
            | "\\" 
            (
                "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "u" { "u" }
                 hexDigit hexDigit hexDigit hexDigit
                |
                zeroToThree [ octalDigit ] [ octalDigit ]
                |
                octalDigit [ octalDigit ]
            )
         } 
        "\"".

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab

PRODUCTIONS

/*----------------------------------identifier----------------------------------*/
identifier<out String value>
= 
id
(. 
    value = t.val;
    log("id="+t.val);
 .)
.
/*----------------------------------staticAccess----------------------------------*/
staticAccess<out int modifier> 
= 
 "static" (.modifier = Constants.ACC_STATIC;.)
.
/*----------------------------------finalAccess----------------------------------*/
finalAccess<out int modifier>
=
 "final" (.modifier = Constants.ACC_FINAL;.)
.
/*----------------------------------CompilationUnit----------------------------------*/
CompilationUnit = 
	typeDeclaration {typeDeclaration}
	(.checkTypes();.)
.
/*----------------------------------typeDeclaration----------------------------------*/
typeDeclaration =
    (. int specifier = 0;.)
	[accessSpecifier<out specifier>]
	(
		interfaceDeclaration<specifier> 
		|
		classDeclaration<specifier>
	)
.
/*----------------------------------classDeclaration----------------------------------*/
classDeclaration<int modifier> =  
	[finalAccess<out int fMod>     (.modifier |= fMod;.)]    
	[staticAccess<out int sMod>    (.modifier |= sMod;.)]   
	"class"
	identifier<out String className>
	(.String superName = "java.lang.Object";.)
	["extends" identifier<out superName>]
	(.String interfaceName = null;.)
	["implements"
		identifier<out interfaceName> 
	]
	(.
	   ClassGen classGen = new ClassGen(
	       className, 
	       superName, 
	       className+".class", 
	       modifier,
	       interfaceName==null ? null : new String[]{interfaceName} );
	   classes.put(className, classGen);
	   log("class "+className+" created");
	.)
	classBody<classGen>
.
/*----------------------------------interfaceDeclaration----------------------------------*/
interfaceDeclaration<int modifier> =
	"interface"
	(. modifier |= Constants.ACC_INTERFACE | Constants.ACC_ABSTRACT; .) 
	identifier<out String interfaceName>
	(.String superInterfaceName = null;.)
    ["extends" 
        identifier<out superInterfaceName>
    ]
	(.
	   ClassGen classGen = new ClassGen(
	       interfaceName, 
	       "java.lang.Object", 
	       interfaceName+".class", 
	       modifier,
	       superInterfaceName==null ? null : new String[]{superInterfaceName} );
	   classes.put(interfaceName, classGen);
	   log("interface "+interfaceName+" created");
	.)   
	interfaceBody<classGen>
.
/*----------------------------------accessSpecifier----------------------------------*/
accessSpecifier<out int specifier> =
	(
	"public"       (.specifier = Constants.ACC_PUBLIC;.)
	| 
	"protected"    (.specifier = Constants.ACC_PROTECTED;.)
	| 
	"private"      (.specifier = Constants.ACC_PRIVATE;.)
	)
	(.specifier = 0;.)
.
/*----------------------------------type----------------------------------*/
type<out Type typeLiteral> =
    (.typeLiteral = null;.)
	(
	   "byte"      (.typeLiteral = Type.BYTE;.)
	   | 
	   "short"     (.typeLiteral = Type.SHORT;.)
	   | 
	   "int"       (.typeLiteral = Type.INT;.)
	   | 
	   "char"      (.typeLiteral = Type.CHAR;.)
	   | 
	   "float"     (.typeLiteral = Type.FLOAT;.)
	   | 
	   "boolean"   (.typeLiteral = Type.BOOLEAN;.)
	   | 
	   "void"      (.typeLiteral = Type.VOID;.)
	   |
	   "String"    (.typeLiteral = new ObjectType("java.lang.String");.)
	   |
	   "Vector"    (.typeLiteral = new ObjectType("java.util.Vector");.)
	)
.
/*----------------------------------formalParameterList----------------------------------*/
formalParameterList<Args args> =
    (.ArrayList<Type> types = new ArrayList<Type>();.)  
    (.ArrayList<String> names = new ArrayList<String>();.)
      
    (.Type typeLiteral = null;.)
    (
        type<out typeLiteral>       
        | 
        identifier<out String typeName>  
        (.
         typeLiteral = objectTypes.get(typeName);
         if(typeLiteral==null)
         {   
             typeLiteral = new ObjectType(typeName);
             objectTypes.put(typeName, (ObjectType)typeLiteral);
         }
        .)
    )
    (.types.add(typeLiteral);.)
	identifier<out String param>
	(.names.add(param);.)
	{
        ',' 
	    (
	        type<out typeLiteral>       
	        | 
	        identifier<out String typeName>  
	        (.
				 typeLiteral = objectTypes.get(typeName);
				 if(typeLiteral==null)
				 { 
				     typeLiteral = new ObjectType(typeName);
				     objectTypes.put(typeName, (ObjectType)typeLiteral);
				 }
	        .)
	    )
	   (.types.add(typeLiteral);.) 
	   identifier<out param>
	   (.names.add(param);.)
	}
	(.
	   args.argTypes = types.toArray(new Type[types.size()]);
	   args.argNames = names.toArray(new String[names.size()]);
	.)
.
/*----------------------------------classBody----------------------------------*/
classBody<ClassGen classGen> =
	'{'
	{
	    (.int modifier = 0;.)
		[accessSpecifier<out modifier>]
        [finalAccess<out int fMod>      (.modifier |= fMod;.)]
        [staticAccess<out int sMod>     (.modifier |= sMod;.)]
		(
            (
                IF(next(_openRoundBracket))
                // это конструктор
			        identifier<out String methodName>   
			        (.Args args = new Args();.)
			        openRoundBracket [formalParameterList<args>] closeRoundBracket
			        (.
                          InstructionList il = new InstructionList();
						  MethodGen methodGen = new MethodGen(
						      modifier,
						      new ObjectType(classGen.getClassName()), // todo сохранить
						      args.argTypes,
						      args.argNames,
						      "<init>",
						      classGen.getClassName(),
						      il,
						      classGen.getConstantPool()
						  );
                          log("method "+methodName+" created");						  
			        .) 
			        openCurlyBracket {Statement} closeCurlyBracket
		    )
            |
            (   // это обычный член класса
                (.Type typeLiteral = null;.)
                (
                    type<out typeLiteral>       
                    | 
                    identifier<out String typeName>  
                    (.
                     typeLiteral = objectTypes.get(typeName);
                     if(typeLiteral==null)
                     {
                         typeLiteral = new ObjectType(typeName);
                         objectTypes.put(typeName, (ObjectType)typeLiteral);
                         log("added type "+typeName);
                     }
                    .)
                )
	            identifier<out String someThing>
                (
                    ( // это метод
                        (.Args args = new Args();.)
                        openRoundBracket [formalParameterList<args>] closeRoundBracket 
                        Statement
		            )
                    |
                    ( // это атрибут
                        ['=' (. ExprInfo dummy = new ExprInfo(this); .) Expression<dummy> ] ';'
                    )
	            )
            )
		)
	}
	'}'
.
/*----------------------------------interfaceBody----------------------------------*/
interfaceBody<ClassGen classGen> =
	'{'
	{
	   (.int modifier = 0;.)
		[accessSpecifier<out modifier>
		  (.     
		      if (modifier == Constants.ACC_PRIVATE || modifier == Constants.ACC_PROTECTED)
                SemErr("interface memebers ought to be public or default");
              modifier = Constants.ACC_PUBLIC;
          .)
		]
		[finalAccess<out int fMod>    (.modifier |= fMod;.)]
		[staticAccess<out int sMod>   (.modifier |= sMod;.)]
		(.Type typeLiteral = null;.)
		(
			type<out typeLiteral>       
			| 
			identifier<out String typeName>  
			(.
			 typeLiteral = objectTypes.get(typeName);
			 if(typeLiteral==null)
			 {   // todo что-то делать с импортами
			     typeLiteral = new ObjectType(typeName);
			     objectTypes.put(typeName, (ObjectType)typeLiteral);
			 }
			.)
		)
		identifier<out String methodName>	
		(.Args args = new Args();.)
		openRoundBracket [formalParameterList<args>] closeRoundBracket ';'
		(.
		  MethodGen methodGen = new MethodGen(
		      modifier,
              typeLiteral,
              args.argTypes,
              args.argNames,
              methodName,
              classGen.getClassName(),
              null, // instructions list
              classGen.getConstantPool()
		  );
		.)
	}
	'}'
.

/*---------------------------------------------------------------------------*
 *---------------------------- Statements -----------------------------------*
 *---------------------------------------------------------------------------*/
// инструкция
Statement                           
=
  Block (.log("block");.)
| "if" ParExpression Statement [ "else" Statement ]
| "while" ParExpression Statement
| (. ExprInfo dummy = new ExprInfo(this); .) "return" [ Expression<dummy> ] ";"
| "break;"
| "continue;"
| ";"
| StatementExpression ';'  
.
/*---------------------------------------------------------------------------*/
// блок кода
Block
= "{" { BlockStatement } "}"
.
/*---------------------------------------------------------------------------*/
// код состоит из объявлений и инструкций
BlockStatement
=
LocalVariableDeclaration ";"
|
Statement
.
/*---------------------------------------------------------------------------*/
// объявление переменной
LocalVariableDeclaration
= 
[ "final" ] type<out Type typeLiteral> identifier<out String varName> 
["="(. ExprInfo info = new ExprInfo(this); .) Expression<info>] 
.
/*---------------------------------------------------------------------------*/
// инструкция - выражение
StatementExpression                   
= 
(. ExprInfo info = new ExprInfo(this); .)
Expression<info>
(. info.checkExprStat(); .)                     
.
/*---------------------------------------------------------------------------*
 *---------------------------- Expressions ----------------------------------*
 *---------------------------------------------------------------------------*/
Expression<ExprInfo info>
= 
// левая часть
Expression1<info>
// м.б. много присвоений 
{
    (.
	    ExprInfo dummy = new ExprInfo(this); 
	    info.setKind(ExprKind.ASSIGN);
    .)
    AssignmentOperator Expression1<dummy> 
}
.
/*---------------------------------------------------------------------------*/
Expression1<ExprInfo info>
= 
(.log("expr");.)
// получение объекта
Expression2<info>
// действия с ним
[ Expression1Rest<info> ]
.
/*---------------------------------------------------------------------------*/
Expression1Rest<ExprInfo info>       
=
// бинарная операция с выражением
(. ExprInfo dummy = new ExprInfo(this); .)
Infixop Expression2<dummy>

// еще бинарные операции с выражением
{
    Infixop Expression2<dummy>
}
(. info.setKind(ExprKind.BINARY);.)
.
/*---------------------------------------------------------------------------*/
Expression2<ExprInfo info>               
=
    // единичный объект
    [Primary<info>]
    // последовательность вызовов к объекту 
    {
        Selector<info>
    }
.
/*---------------------------------------------------------------------------*/
Primary<ExprInfo info>
=
    "(" Expression<info> ")"
    (. info.setKind(ExprKind.PARENS);.)
|   "this"
    (. info.setKind(ExprKind.IDENT);.)
    [Arguments]
|   "super" SuperSuffix<info>

|    Literal
     (.info.setKind(ExprKind.LITERAL);.)

|   "new" Creator<info>

// еще вызвовы
|
(
    identifier<out String accessor>
    (.info.setKind(ExprKind.IDENT);.)
    {
        '.'
        identifier<out accessor>
    }
    [Arguments]
)
.
/*---------------------------------------------------------------------------*/
// аргументы вызовов
Arguments                           
=
(. 
    log("args");
    ExprInfo dummy = new ExprInfo(this); 
.)
// в скобках - пусто, одно или несколько выражений
"(" [ (.log("expr1");.) 
Expression<dummy> { "," (.log("expr2");.)
 Expression<dummy> } ] ")"
.
/*---------------------------------------------------------------------------*/
// вызов метода предка
SuperSuffix<ExprInfo info>
=
// конструктор
Arguments
(. info.setKind(ExprKind.APPLY); .)
| 
// другие методы
'.' identifier<out String accessor>
(. info.setKind(ExprKind.IDENT); .)
[(. info.setKind(ExprKind.APPLY);.)Arguments ]  
.
/*---------------------------------------------------------------------------*/
// квалифицированное имя
Qualident
= 
identifier<out String accessor>
{
    '.'
    identifier<out accessor>
}
.
/*---------------------------------------------------------------------------*/
// литерал =)
Literal
= 
  (intLit
| floatLit
| charLit
| stringLit
| "true" | "false"
| "null")
(.log("lit="+t.val);.)
.
/*---------------------------------------------------------------------------*/
// вызов конструктора
Creator<ExprInfo info>
= 
    Qualident Arguments
    (. info.setKind(ExprKind.NEWCLASS); .)
.
/*---------------------------------------------------------------------------*/
// вызов метода
Selector<ExprInfo info>
= 
"."
identifier<out String accessor> [Arguments]
.
/*---------------------------------------------------------------------------*/
// выражение в скобках
ParExpression                         
=
(. ExprInfo dummy = new ExprInfo(this); .)
"(" Expression<dummy> ")"
.
/*---------------------------------------------------------------------------*/
// присвоение
AssignmentOperator
= 
  "="
| "+="
| "-="
| "*="
| "/="
| "&="
| "|="
| "^="
| "%="
.
/*---------------------------------------------------------------------------*/
// бинарная операция
Infixop
= 
  "||"
| "&&"
| "^"
| "=="
| "!="
| "<"
| ">"
| "<="
| ">="
| "+"
| "-"
| "*"
| "/"
| "%"
.
/*---------------------------------------------------------------------------*/
END CompilationUnit.
