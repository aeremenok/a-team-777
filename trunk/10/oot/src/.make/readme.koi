# $Id: readme.koi,v 1.3.2.3 2006/03/06 10:50:40 dumb Exp $

общая структура проекта, операции над проектом, Makefile.

релиз библиотеки -- номер версии, набор .h и .a файлов и имя метки CVS, по которой
можно получить состояние бибилиотеки на момент релиза.

1) make в корне проекта ($ROOT) рекурсивно выполняется для подпроектов, перечисленных
   в переменной DIRS в файле project.conf, либо для всех подпроектов первого уровня,
   имеющих Makefile и не имеющих .nomake в своем корне. флаги и цели корневого make передаются
   в подпроекты.
   
2) по умолчанию (make без цели) выполняется цель default.
3) exe собирает исполняемый модуль; lib -- архив; clean удаляет все производные файлы;
   distclean удаляет так же производные каталоги. сборка этих целей *не прерывается
   ошибками* в подпроектах.
   
4) release выполняет distclean и release для подпроектов.
   сборка *останавливается при ошибках* в подпроектах. подпроекты отвечают за копирование
   своих .h и .a файлов в $RELEASEDIR/inc и $RELEASEDIR/lib. при успешной сборке
   всех подпроектов выполняется их тестирование. при успешной сборке и тестировании всех
   подпроектов номер билда проекта увеличивается на 1. выполняется cvs commit.
   выполняется cvs tag для нового значения версии.
   
   
   
Структура Makefile. Конфигурации и цели. Именование переменных. Типы переменных.

1)
   ./ - $METAROOT (с уровня подпроекта)
    +-arch.inc
    +-project/ - $PROJECT (только имя)
             +-src/ - $ROOT (с уровня подпроекта)
             |    +-Makefile
             |    +-@Makefile.inc
             |    +-@makefile
             |    +-project.conf
             |    +-version
             |    +-inc.inc
             |    +-extlib.inc
             |    `-subproject/
             |                +-Makefile
             |                +-inc/
             |                +-src/
             |                `-tst/
             +-released/ - $RELEASEDIR (с уровня $ROOT)
             |         +-inc/
             |         `-lib/
             +-dep/ - $DEPDIR (с уровня $ROOT)
             |    +-dep1-x_x_x_x/
             |    | ...
             |    `-depN-x_x_x_x/
             +-inc/
             |    +-~dep1
             |    | ...
             |    `-~depN
             `-lib/
                  +-~dep1
                  | ...
                  `-~depN

   src содержит все исходные тексты проекта, организованные в подпроекты и механизм сборки.
     
     project.conf
       задает имя проекта (PROJECT),
       [необязательный] список подпроектов для сборки (DIRS),
       список проектов, от которых существует зависимость (DEPPROJECTS),
       их версии (xxx_LABEL) и параметры их подготовки (xxx_PREPARE),
       конфигурации проекта (CFGS),
       платформы для автокомпиляции проекта (ARCHS).
     version
       задает версию проекта.
     inc.inc
       включается во все Makefile и (основное назначение) задает пути к каталогам #include.
       содержит остальные общепроектные параметры (например LFLAGS, LIBADD...)
     extlib.inc
       создается в процессе make [risky-]prepare.
       включается в Makefile подпроектов, имеющих внешние зависимости
       добавляет все библиотеки зависимостей к LIBADD
     Makefile
       выполняет первоначальную загрузку внешнего набора Makefile.
     
     subproject
       содержит все исходные тексты конкретного подпроекта и механизм сборки.
       
       inc
         содержит все .h экспортируемые из проекта. имена этих файлов должны быть уникальными
         *в пределах всего проекта*.
       src
         содержит исходные тексты и локальные .h подпроекта.
       tst
         содержит набор тестов подпроекта.
       
  \todo

2) конфигурация -- значение переменной CFG. предполагаются различные флаги (компиляции, линковки, ...) для,
   например, CFG=release и CFG=debug. кроме того, возможен разный состав файлов (например, с трассировщиком
   памяти/без).
   
3) цель -- набор выполняемых действий. переменная GOAL определена во время сборки цели (локальная переменная).
   цели определенные в Makefile.inc:
   exe: сборка исполняемого модуля
   lib: сборка библиотеки
   so: сборка shared library
   test: сборка тестового модуля и прогон теста
   clean: удаление производных файлов
   distclean: удаление производных каталогов
   
4) переменные именуются большими буквами. если переменная специфична для цели, конфигурации или цели в
   опеределенной конфигурации, к имени добавляется префикс спецификации [${CFG}_][${GOAL}_]:
   
   SRCS -- исходники
   debug_SRCS -- исходники для конфигурации debug
   lib_SRCS -- исходники для цели lib
   debug_lib_SRCS -- исходники для цели lib в конфигурации debug
   
   предопределенные переменные CPPFLAGS, CXXFLAGS, CFLAGS, INC, DEFS, LDFLAGS, LDADD, LIBADD наследуются, т.е.
   
   CXXFLAGS += -pthread
   exe_CXXFLAGS += -fno-inlines
   
   при компиляции цели exe даст в командной строке 
   g++ ... -pthread -fno-inlines ...
   
   переменные объединяются в порядке VAR, goal_VAR, cfg_VAR, cfg_goal_VAR.
   
   все остальные предопределенные переменные замещаются, т.е.
   
   SRCS := a.cpp
   exe_SRCS := b.cpp
   
   при компиляции цели exe рассматривается только b.cpp.
   
   порядок поиска переменной таков: cfg_goal_VAR, goal_VAR, cfg_VAR, VAR
   
5) предпочтительны нерекурсивные переменные (:=).
   для переменных-флагов предпочтительна запись += (DEFS += -DQT_THREAD_SUPPORT), чтобы можно было управлять
   их начальными значениями через переменные окружения (make DEFS=-D_MT)

6) используются следующие предопределенные переменные:

   ROOT:      путь от текущего каталога к каталогу Makefile.inc (в корень проекта). по умолчанию ..
   METAROOT:  путь от текущего каталога к корню всех проектов. по умолчанию ${ROOT}/../..
   
   CFG:       конфигурация. по умолчанию debug
   GOAL:      цель. локальная переменная, определена для exe, lib, test, so
   
   DEPS:      дополнительные зависимости, обрабатываемые в первую очередь (см. test_DEPS, например)
   
   CC:        cc
   CXX:       cxx
   LD:        линковщик
   AR:        библиотекарь
   
   OBJDIR:    каталог производных объектников. по умолчанию ./${CFG}
   SRCS:      список исходников
   OBJS:      список исходных объектников. они не очищиются clean
   TARGET:    родовое имя цели.
   
   INC:       каталоги include
   DEFS:      предопределения макросов
   CPPFLAGS:  флаги препроцессора (общие для C/C++)
   CFLAGS:    флаги СС
   CXXFLAGS:  флаги CXX
   
   LDFLAGS:   флаги линковщика (типа -s, -L). НИЧЕГО ДРУГОГО
   LDADD:     дополнительные библиотеки (-l). не проверяются как prerequisites
   LIBADD:    архивы; ссылка как на файлы; проверяются как prerequisites
